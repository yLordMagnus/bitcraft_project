{"version":3,"sources":["../../SpacetimeDB/sdks/typescript/packages/sdk/src/binary_reader.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/binary_writer.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/utils.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/connection_id.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/time_duration.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/timestamp.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/identity.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/schedule_at.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/algebraic_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/algebraic_value.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/row_size_hint_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/bsatn_row_list_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/call_reducer_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscribe_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/one_off_query_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/query_id_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscribe_single_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscribe_multi_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/unsubscribe_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/unsubscribe_multi_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/client_message_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/query_update_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/compressable_query_update_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/table_update_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/database_update_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/initial_subscription_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/update_status_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/reducer_call_info_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/energy_quanta_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/transaction_update_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/transaction_update_light_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/identity_token_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/one_off_table_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/one_off_query_response_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscribe_rows_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscribe_applied_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/unsubscribe_applied_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscription_error_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/subscribe_multi_applied_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/unsubscribe_multi_applied_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_api/server_message_type.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/event_emitter.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/logger.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/table_cache.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/client_cache.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/version.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/decompress.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/websocket_decompress_adapter.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/db_connection_builder.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/subscription_builder_impl.ts","../../SpacetimeDB/sdks/typescript/packages/sdk/src/db_connection_impl.ts"],"names":["ScheduleAt","AlgebraicType","Type","RowSizeHint","BsatnRowList","CallReducer","Subscribe","OneOffQuery","QueryId","SubscribeSingle","SubscribeMulti","Unsubscribe","UnsubscribeMulti","ClientMessage","QueryUpdate","CompressableQueryUpdate","TableUpdate","DatabaseUpdate","InitialSubscription","UpdateStatus","ReducerCallInfo","EnergyQuanta","TransactionUpdate","TransactionUpdateLight","IdentityToken","OneOffTable","OneOffQueryResponse","SubscribeRows","SubscribeApplied","UnsubscribeApplied","SubscriptionError","SubscribeMultiApplied","UnsubscribeMultiApplied","ServerMessage","TableCache","DbConnectionBuilder","DbConnectionImpl","SubscriptionBuilderImpl","fromByteArray","event","eventContext","callbacks"],"mappings":"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","file":"index.js","sourcesContent":["import { TextDecoder } from '@zxing/text-encoding';\n\nexport default class BinaryReader {\n  #buffer: DataView;\n  #offset: number = 0;\n\n  constructor(input: Uint8Array) {\n    this.#buffer = new DataView(input.buffer);\n    this.#offset = input.byteOffset;\n  }\n\n  get offset(): number {\n    return this.#offset;\n  }\n\n  readUInt8Array(): Uint8Array {\n    const length = this.readU32();\n    const value: Uint8Array = new Uint8Array(\n      this.#buffer.buffer,\n      this.#offset,\n      length\n    );\n    this.#offset += length;\n    return value;\n  }\n\n  readBool(): boolean {\n    const value = this.#buffer.getUint8(this.#offset);\n    this.#offset += 1;\n    return value !== 0;\n  }\n\n  readByte(): number {\n    const value = this.#buffer.getUint8(this.#offset);\n    this.#offset += 1;\n    return value;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const value: DataView = new DataView(\n      this.#buffer.buffer,\n      this.#offset,\n      length\n    );\n    this.#offset += length;\n    return new Uint8Array(value.buffer);\n  }\n\n  readI8(): number {\n    const value = this.#buffer.getInt8(this.#offset);\n    this.#offset += 1;\n    return value;\n  }\n\n  readU8(): number {\n    const value = this.#buffer.getUint8(this.#offset);\n    this.#offset += 1;\n    return value;\n  }\n\n  readI16(): number {\n    const value = this.#buffer.getInt16(this.#offset, true);\n    this.#offset += 2;\n    return value;\n  }\n\n  readU16(): number {\n    const value = this.#buffer.getUint16(this.#offset, true);\n    this.#offset += 2;\n    return value;\n  }\n\n  readI32(): number {\n    const value = this.#buffer.getInt32(this.#offset, true);\n    this.#offset += 4;\n    return value;\n  }\n\n  readU32(): number {\n    const value = this.#buffer.getUint32(this.#offset, true);\n    this.#offset += 4;\n    return value;\n  }\n\n  readI64(): bigint {\n    const value = this.#buffer.getBigInt64(this.#offset, true);\n    this.#offset += 8;\n    return value;\n  }\n\n  readU64(): bigint {\n    const value = this.#buffer.getBigUint64(this.#offset, true);\n    this.#offset += 8;\n    return value;\n  }\n\n  readU128(): bigint {\n    const lowerPart = this.#buffer.getBigUint64(this.#offset, true);\n    const upperPart = this.#buffer.getBigUint64(this.#offset + 8, true);\n    this.#offset += 16;\n\n    return (upperPart << BigInt(64)) + lowerPart;\n  }\n\n  readI128(): bigint {\n    const lowerPart = this.#buffer.getBigUint64(this.#offset, true);\n    const upperPart = this.#buffer.getBigInt64(this.#offset + 8, true);\n    this.#offset += 16;\n\n    return (upperPart << BigInt(64)) + lowerPart;\n  }\n\n  readU256(): bigint {\n    const p0 = this.#buffer.getBigUint64(this.#offset, true);\n    const p1 = this.#buffer.getBigUint64(this.#offset + 8, true);\n    const p2 = this.#buffer.getBigUint64(this.#offset + 16, true);\n    const p3 = this.#buffer.getBigUint64(this.#offset + 24, true);\n    this.#offset += 32;\n\n    return (\n      (p3 << BigInt(3 * 64)) +\n      (p2 << BigInt(2 * 64)) +\n      (p1 << BigInt(1 * 64)) +\n      p0\n    );\n  }\n\n  readI256(): bigint {\n    const p0 = this.#buffer.getBigUint64(this.#offset, true);\n    const p1 = this.#buffer.getBigUint64(this.#offset + 8, true);\n    const p2 = this.#buffer.getBigUint64(this.#offset + 16, true);\n    const p3 = this.#buffer.getBigInt64(this.#offset + 24, true);\n    this.#offset += 32;\n\n    return (\n      (p3 << BigInt(3 * 64)) +\n      (p2 << BigInt(2 * 64)) +\n      (p1 << BigInt(1 * 64)) +\n      p0\n    );\n  }\n\n  readF32(): number {\n    const value = this.#buffer.getFloat32(this.#offset, true);\n    this.#offset += 4;\n    return value;\n  }\n\n  readF64(): number {\n    const value = this.#buffer.getFloat64(this.#offset, true);\n    this.#offset += 8;\n    return value;\n  }\n\n  readString(): string {\n    const length = this.readU32();\n    const uint8Array = new Uint8Array(\n      this.#buffer.buffer,\n      this.#offset,\n      length\n    );\n    const decoder = new TextDecoder('utf-8');\n    const value = decoder.decode(uint8Array);\n    this.#offset += length;\n    return value;\n  }\n}\n","import { fromByteArray } from 'base64-js';\nimport { TextEncoder } from '@zxing/text-encoding';\n\nexport default class BinaryWriter {\n  #buffer: Uint8Array;\n  #view: DataView;\n  #offset: number = 0;\n\n  constructor(size: number) {\n    this.#buffer = new Uint8Array(size);\n    this.#view = new DataView(this.#buffer.buffer);\n  }\n\n  #expandBuffer(additionalCapacity: number): void {\n    const minCapacity = this.#offset + additionalCapacity + 1;\n    if (minCapacity <= this.#buffer.length) return;\n    let newCapacity = this.#buffer.length * 2;\n    if (newCapacity < minCapacity) newCapacity = minCapacity;\n    const newBuffer = new Uint8Array(newCapacity);\n    newBuffer.set(this.#buffer);\n    this.#buffer = newBuffer;\n    this.#view = new DataView(this.#buffer.buffer);\n  }\n\n  toBase64(): string {\n    return fromByteArray(this.#buffer.subarray(0, this.#offset));\n  }\n\n  getBuffer(): Uint8Array {\n    return this.#buffer.slice(0, this.#offset);\n  }\n\n  writeUInt8Array(value: Uint8Array): void {\n    const length = value.length;\n\n    this.#expandBuffer(4 + length);\n\n    this.writeU32(length);\n    this.#buffer.set(value, this.#offset);\n    this.#offset += value.length;\n  }\n\n  writeBool(value: boolean): void {\n    this.#expandBuffer(1);\n    this.#view.setUint8(this.#offset, value ? 1 : 0);\n    this.#offset += 1;\n  }\n\n  writeByte(value: number): void {\n    this.#expandBuffer(1);\n    this.#view.setUint8(this.#offset, value);\n    this.#offset += 1;\n  }\n\n  writeI8(value: number): void {\n    this.#expandBuffer(1);\n    this.#view.setInt8(this.#offset, value);\n    this.#offset += 1;\n  }\n\n  writeU8(value: number): void {\n    this.#expandBuffer(1);\n    this.#view.setUint8(this.#offset, value);\n    this.#offset += 1;\n  }\n\n  writeI16(value: number): void {\n    this.#expandBuffer(2);\n    this.#view.setInt16(this.#offset, value, true);\n    this.#offset += 2;\n  }\n\n  writeU16(value: number): void {\n    this.#expandBuffer(2);\n    this.#view.setUint16(this.#offset, value, true);\n    this.#offset += 2;\n  }\n\n  writeI32(value: number): void {\n    this.#expandBuffer(4);\n    this.#view.setInt32(this.#offset, value, true);\n    this.#offset += 4;\n  }\n\n  writeU32(value: number): void {\n    this.#expandBuffer(4);\n    this.#view.setUint32(this.#offset, value, true);\n    this.#offset += 4;\n  }\n\n  writeI64(value: bigint): void {\n    this.#expandBuffer(8);\n    this.#view.setBigInt64(this.#offset, value, true);\n    this.#offset += 8;\n  }\n\n  writeU64(value: bigint): void {\n    this.#expandBuffer(8);\n    this.#view.setBigUint64(this.#offset, value, true);\n    this.#offset += 8;\n  }\n\n  writeU128(value: bigint): void {\n    this.#expandBuffer(16);\n    const lowerPart = value & BigInt('0xFFFFFFFFFFFFFFFF');\n    const upperPart = value >> BigInt(64);\n    this.#view.setBigUint64(this.#offset, lowerPart, true);\n    this.#view.setBigUint64(this.#offset + 8, upperPart, true);\n    this.#offset += 16;\n  }\n\n  writeI128(value: bigint): void {\n    this.#expandBuffer(16);\n    const lowerPart = value & BigInt('0xFFFFFFFFFFFFFFFF');\n    const upperPart = value >> BigInt(64);\n    this.#view.setBigInt64(this.#offset, lowerPart, true);\n    this.#view.setBigInt64(this.#offset + 8, upperPart, true);\n    this.#offset += 16;\n  }\n\n  writeU256(value: bigint): void {\n    this.#expandBuffer(32);\n    const low_64_mask = BigInt('0xFFFFFFFFFFFFFFFF');\n    const p0 = value & low_64_mask;\n    const p1 = (value >> BigInt(64 * 1)) & low_64_mask;\n    const p2 = (value >> BigInt(64 * 2)) & low_64_mask;\n    const p3 = value >> BigInt(64 * 3);\n    this.#view.setBigUint64(this.#offset + 8 * 0, p0, true);\n    this.#view.setBigUint64(this.#offset + 8 * 1, p1, true);\n    this.#view.setBigUint64(this.#offset + 8 * 2, p2, true);\n    this.#view.setBigUint64(this.#offset + 8 * 3, p3, true);\n    this.#offset += 32;\n  }\n\n  writeI256(value: bigint): void {\n    this.#expandBuffer(32);\n    const low_64_mask = BigInt('0xFFFFFFFFFFFFFFFF');\n    const p0 = value & low_64_mask;\n    const p1 = (value >> BigInt(64 * 1)) & low_64_mask;\n    const p2 = (value >> BigInt(64 * 2)) & low_64_mask;\n    const p3 = value >> BigInt(64 * 3);\n    this.#view.setBigUint64(this.#offset + 8 * 0, p0, true);\n    this.#view.setBigUint64(this.#offset + 8 * 1, p1, true);\n    this.#view.setBigUint64(this.#offset + 8 * 2, p2, true);\n    this.#view.setBigInt64(this.#offset + 8 * 3, p3, true);\n    this.#offset += 32;\n  }\n\n  writeF32(value: number): void {\n    this.#expandBuffer(4);\n    this.#view.setFloat32(this.#offset, value, true);\n    this.#offset += 4;\n  }\n\n  writeF64(value: number): void {\n    this.#expandBuffer(8);\n    this.#view.setFloat64(this.#offset, value, true);\n    this.#offset += 8;\n  }\n\n  writeString(value: string): void {\n    const encoder = new TextEncoder();\n    const encodedString = encoder.encode(value);\n    this.writeU32(encodedString.length);\n    this.#expandBuffer(encodedString.length);\n    this.#buffer.set(encodedString, this.#offset);\n    this.#offset += encodedString.length;\n  }\n}\n","import BinaryReader from './binary_reader';\nimport BinaryWriter from './binary_writer';\n\nexport function toPascalCase(s: string): string {\n  const str = s.replace(/([-_][a-z])/gi, $1 => {\n    return $1.toUpperCase().replace('-', '').replace('_', '');\n  });\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function deepEqual(obj1: any, obj2: any): boolean {\n  // If both are strictly equal (covers primitives and reference equality), return true\n  if (obj1 === obj2) return true;\n\n  // If either is a primitive type or one is null, return false since we already checked for strict equality\n  if (\n    typeof obj1 !== 'object' ||\n    obj1 === null ||\n    typeof obj2 !== 'object' ||\n    obj2 === null\n  ) {\n    return false;\n  }\n\n  // Get keys of both objects\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  // If number of keys is different, return false\n  if (keys1.length !== keys2.length) return false;\n\n  // Check all keys and compare values recursively\n  for (let key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function uint8ArrayToHexString(array: Uint8Array): string {\n  return Array.prototype.map\n    .call(array.reverse(), x => ('00' + x.toString(16)).slice(-2))\n    .join('');\n}\n\nexport function uint8ArrayToU128(array: Uint8Array): bigint {\n  if (array.length != 16) {\n    throw new Error(`Uint8Array is not 16 bytes long: ${array}`);\n  }\n  return new BinaryReader(array).readU128();\n}\n\nexport function uint8ArrayToU256(array: Uint8Array): bigint {\n  if (array.length != 32) {\n    throw new Error(`Uint8Array is not 32 bytes long: [${array}]`);\n  }\n  return new BinaryReader(array).readU256();\n}\n\nexport function hexStringToUint8Array(str: string): Uint8Array {\n  if (str.startsWith('0x')) {\n    str = str.slice(2);\n  }\n  let matches = str.match(/.{1,2}/g) || [];\n  let data = Uint8Array.from(matches.map((byte: string) => parseInt(byte, 16)));\n  if (data.length != 32) {\n    return new Uint8Array(0);\n  }\n  return data.reverse();\n}\n\nexport function hexStringToU128(str: string): bigint {\n  return uint8ArrayToU128(hexStringToUint8Array(str));\n}\n\nexport function hexStringToU256(str: string): bigint {\n  return uint8ArrayToU256(hexStringToUint8Array(str));\n}\n\nexport function u128ToUint8Array(data: bigint): Uint8Array {\n  let writer = new BinaryWriter(16);\n  writer.writeU128(data);\n  return writer.getBuffer();\n}\n\nexport function u128ToHexString(data: bigint): string {\n  return uint8ArrayToHexString(u128ToUint8Array(data));\n}\n\nexport function u256ToUint8Array(data: bigint): Uint8Array {\n  let writer = new BinaryWriter(32);\n  writer.writeU256(data);\n  return writer.getBuffer();\n}\n\nexport function u256ToHexString(data: bigint): string {\n  return uint8ArrayToHexString(u256ToUint8Array(data));\n}\n","import { hexStringToU128, u128ToHexString, u128ToUint8Array } from './utils';\n\n/**\n * A unique identifier for a client connected to a database.\n */\nexport class ConnectionId {\n  data: bigint;\n\n  get __connection_id__(): bigint {\n    return this.data;\n  }\n\n  /**\n   * Creates a new `ConnectionId`.\n   */\n  constructor(data: bigint) {\n    this.data = data;\n  }\n\n  isZero(): boolean {\n    return this.data === BigInt(0);\n  }\n\n  static nullIfZero(addr: ConnectionId): ConnectionId | null {\n    if (addr.isZero()) {\n      return null;\n    } else {\n      return addr;\n    }\n  }\n\n  static random(): ConnectionId {\n    function randomU8(): number {\n      return Math.floor(Math.random() * 0xff);\n    }\n    let result = BigInt(0);\n    for (let i = 0; i < 16; i++) {\n      result = (result << BigInt(8)) | BigInt(randomU8());\n    }\n    return new ConnectionId(result);\n  }\n\n  /**\n   * Compare two connection IDs for equality.\n   */\n  isEqual(other: ConnectionId): boolean {\n    return this.data == other.data;\n  }\n\n  /**\n   * Print the connection ID as a hexadecimal string.\n   */\n  toHexString(): string {\n    return u128ToHexString(this.data);\n  }\n\n  /**\n   * Convert the connection ID to a Uint8Array.\n   */\n  toUint8Array(): Uint8Array {\n    return u128ToUint8Array(this.data);\n  }\n\n  /**\n   * Parse a connection ID from a hexadecimal string.\n   */\n  static fromString(str: string): ConnectionId {\n    return new ConnectionId(hexStringToU128(str));\n  }\n\n  static fromStringOrNull(str: string): ConnectionId | null {\n    let addr = ConnectionId.fromString(str);\n    if (addr.isZero()) {\n      return null;\n    } else {\n      return addr;\n    }\n  }\n}\n","/**\n * A difference between two points in time, represented as a number of microseconds.\n */\nexport class TimeDuration {\n  __time_duration_micros__: bigint;\n\n  private static MICROS_PER_MILLIS: bigint = 1000n;\n\n  get micros(): bigint {\n    return this.__time_duration_micros__;\n  }\n\n  get millis(): number {\n    return Number(this.micros / TimeDuration.MICROS_PER_MILLIS);\n  }\n\n  constructor(micros: bigint) {\n    this.__time_duration_micros__ = micros;\n  }\n\n  static fromMillis(millis: number): TimeDuration {\n    return new TimeDuration(BigInt(millis) * TimeDuration.MICROS_PER_MILLIS);\n  }\n}\n","/**\n * A point in time, represented as a number of microseconds since the Unix epoch.\n */\nexport class Timestamp {\n  __timestamp_micros_since_unix_epoch__: bigint;\n\n  private static MICROS_PER_MILLIS: bigint = 1000n;\n\n  get microsSinceUnixEpoch(): bigint {\n    return this.__timestamp_micros_since_unix_epoch__;\n  }\n\n  constructor(micros: bigint) {\n    this.__timestamp_micros_since_unix_epoch__ = micros;\n  }\n\n  /**\n   * The Unix epoch, the midnight at the beginning of January 1, 1970, UTC.\n   */\n  static UNIX_EPOCH: Timestamp = new Timestamp(0n);\n\n  /**\n   * Get a `Timestamp` representing the execution environment's belief of the current moment in time.\n   */\n  static now(): Timestamp {\n    return Timestamp.fromDate(new Date());\n  }\n\n  /**\n   * Get a `Timestamp` representing the same point in time as `date`.\n   */\n  static fromDate(date: Date): Timestamp {\n    const millis = date.getTime();\n    const micros = BigInt(millis) * Timestamp.MICROS_PER_MILLIS;\n    return new Timestamp(micros);\n  }\n\n  /**\n   * Get a `Date` representing approximately the same point in time as `this`.\n   *\n   * This method truncates to millisecond precision,\n   * and throws `RangeError` if the `Timestamp` is outside the range representable as a `Date`.\n   */\n  toDate(): Date {\n    const micros = this.__timestamp_micros_since_unix_epoch__;\n    const millis = micros / Timestamp.MICROS_PER_MILLIS;\n    if (\n      millis > BigInt(Number.MAX_SAFE_INTEGER) ||\n      millis < BigInt(Number.MIN_SAFE_INTEGER)\n    ) {\n      throw new RangeError(\n        \"Timestamp is outside of the representable range of JS's Date\"\n      );\n    }\n    return new Date(Number(millis));\n  }\n}\n","import BinaryReader from './binary_reader';\nimport BinaryWriter from './binary_writer';\nimport { hexStringToU256, u256ToHexString, u256ToUint8Array } from './utils';\n\n/**\n * A unique identifier for a user connected to a database.\n */\nexport class Identity {\n  data: bigint;\n\n  get __identity__(): bigint {\n    return this.data;\n  }\n\n  /**\n   * Creates a new `Identity`.\n   *\n   * `data` can be a hexadecimal string or a `bigint`.\n   */\n  constructor(data: string | bigint) {\n    // we get a JSON with __identity__ when getting a token with a JSON API\n    // and an bigint when using BSATN\n    this.data = typeof data === 'string' ? hexStringToU256(data) : data;\n  }\n\n  /**\n   * Compare two identities for equality.\n   */\n  isEqual(other: Identity): boolean {\n    return this.toHexString() === other.toHexString();\n  }\n\n  /**\n   * Print the identity as a hexadecimal string.\n   */\n  toHexString(): string {\n    return u256ToHexString(this.data);\n  }\n\n  /**\n   * Convert the address to a Uint8Array.\n   */\n  toUint8Array(): Uint8Array {\n    return u256ToUint8Array(this.data);\n  }\n\n  /**\n   * Parse an Identity from a hexadecimal string.\n   */\n  static fromString(str: string): Identity {\n    return new Identity(str);\n  }\n}\n","import { AlgebraicType, SumTypeVariant } from './algebraic_type';\nimport type { AlgebraicValue } from './algebraic_value';\n\nexport namespace ScheduleAt {\n  export function getAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant('Interval', AlgebraicType.createTimeDurationType()),\n      new SumTypeVariant('Time', AlgebraicType.createTimestampType()),\n    ]);\n  }\n\n  export type Interval = {\n    tag: 'Interval';\n    value: { __time_duration_micros__: BigInt };\n  };\n  export const Interval = (value: BigInt): Interval => ({\n    tag: 'Interval',\n    value: { __time_duration_micros__: value },\n  });\n  export type Time = {\n    tag: 'Time';\n    value: { __timestamp_micros_since_unix_epoch__: BigInt };\n  };\n  export const Time = (value: BigInt): Time => ({\n    tag: 'Time',\n    value: { __timestamp_micros_since_unix_epoch__: value },\n  });\n\n  export function fromValue(value: AlgebraicValue): ScheduleAt {\n    let sumValue = value.asSumValue();\n    switch (sumValue.tag) {\n      case 0:\n        return {\n          tag: 'Interval',\n          value: {\n            __time_duration_micros__: sumValue.value\n              .asProductValue()\n              .elements[0].asBigInt(),\n          },\n        };\n      case 1:\n        return {\n          tag: 'Time',\n          value: {\n            __timestamp_micros_since_unix_epoch__: sumValue.value.asBigInt(),\n          },\n        };\n      default:\n        throw 'unreachable';\n    }\n  }\n}\n\nexport type ScheduleAt = ScheduleAt.Interval | ScheduleAt.Time;\nexport default ScheduleAt;\n","import { TimeDuration } from './time_duration';\nimport { Timestamp } from './timestamp';\nimport { ConnectionId } from './connection_id';\nimport type BinaryReader from './binary_reader';\nimport BinaryWriter from './binary_writer';\nimport { Identity } from './identity';\nimport ScheduleAt from './schedule_at';\n\n/**\n * A variant of a sum type.\n *\n * NOTE: Each element has an implicit element tag based on its order.\n * Uniquely identifies an element similarly to protobuf tags.\n */\nexport class SumTypeVariant {\n  name: string;\n  algebraicType: AlgebraicType;\n\n  constructor(name: string, algebraicType: AlgebraicType) {\n    this.name = name;\n    this.algebraicType = algebraicType;\n  }\n}\n\n/**\n * Unlike most languages, sums in SATS are *[structural]* and not nominal.\n * When checking whether two nominal types are the same,\n * their names and/or declaration sites (e.g., module / namespace) are considered.\n * Meanwhile, a structural type system would only check the structure of the type itself,\n * e.g., the names of its variants and their inner data types in the case of a sum.\n *\n * This is also known as a discriminated union (implementation) or disjoint union.\n * Another name is [coproduct (category theory)](https://ncatlab.org/nlab/show/coproduct).\n *\n * These structures are known as sum types because the number of possible values a sum\n * ```ignore\n * { N_0(T_0), N_1(T_1), ..., N_n(T_n) }\n * ```\n * is:\n * ```ignore\n * Σ (i ∈ 0..n). values(T_i)\n * ```\n * so for example, `values({ A(U64), B(Bool) }) = values(U64) + values(Bool)`.\n *\n * See also: https://ncatlab.org/nlab/show/sum+type.\n *\n * [structural]: https://en.wikipedia.org/wiki/Structural_type_system\n */\nexport class SumType {\n  variants: SumTypeVariant[];\n\n  constructor(variants: SumTypeVariant[]) {\n    this.variants = variants;\n  }\n\n  serialize = (writer: BinaryWriter, value: any): void => {\n    // In TypeScript we handle Option values as a special case\n    // we don't represent the some and none variants, but instead\n    // we represent the value directly.\n    if (\n      this.variants.length == 2 &&\n      this.variants[0].name === 'some' &&\n      this.variants[1].name === 'none'\n    ) {\n      if (value !== null && value !== undefined) {\n        writer.writeByte(0);\n        this.variants[0].algebraicType.serialize(writer, value);\n      } else {\n        writer.writeByte(1);\n      }\n    } else {\n      let variant = value['tag'];\n      const index = this.variants.findIndex(v => v.name === variant);\n      if (index < 0) {\n        throw `Can't serialize a sum type, couldn't find ${value.tag} tag`;\n      }\n      writer.writeU8(index);\n      this.variants[index].algebraicType.serialize(writer, value['value']);\n    }\n  };\n\n  deserialize = (reader: BinaryReader): any => {\n    let tag = reader.readU8();\n    // In TypeScript we handle Option values as a special case\n    // we don't represent the some and none variants, but instead\n    // we represent the value directly.\n    if (\n      this.variants.length == 2 &&\n      this.variants[0].name === 'some' &&\n      this.variants[1].name === 'none'\n    ) {\n      if (tag === 0) {\n        return this.variants[0].algebraicType.deserialize(reader);\n      } else if (tag === 1) {\n        return undefined;\n      } else {\n        throw `Can't deserialize an option type, couldn't find ${tag} tag`;\n      }\n    } else {\n      let variant = this.variants[tag];\n      let value = variant.algebraicType.deserialize(reader);\n      return { tag: variant.name, value };\n    }\n  };\n}\n\n/**\n * A factor / element of a product type.\n *\n * An element consist of an optional name and a type.\n *\n * NOTE: Each element has an implicit element tag based on its order.\n * Uniquely identifies an element similarly to protobuf tags.\n */\nexport class ProductTypeElement {\n  name: string;\n  algebraicType: AlgebraicType;\n\n  constructor(name: string, algebraicType: AlgebraicType) {\n    this.name = name;\n    this.algebraicType = algebraicType;\n  }\n}\n\n/**\n * A structural product type  of the factors given by `elements`.\n *\n * This is also known as `struct` and `tuple` in many languages,\n * but note that unlike most languages, products in SATs are *[structural]* and not nominal.\n * When checking whether two nominal types are the same,\n * their names and/or declaration sites (e.g., module / namespace) are considered.\n * Meanwhile, a structural type system would only check the structure of the type itself,\n * e.g., the names of its fields and their types in the case of a record.\n * The name \"product\" comes from category theory.\n *\n * See also: https://ncatlab.org/nlab/show/product+type.\n *\n * These structures are known as product types because the number of possible values in product\n * ```ignore\n * { N_0: T_0, N_1: T_1, ..., N_n: T_n }\n * ```\n * is:\n * ```ignore\n * Π (i ∈ 0..n). values(T_i)\n * ```\n * so for example, `values({ A: U64, B: Bool }) = values(U64) * values(Bool)`.\n *\n * [structural]: https://en.wikipedia.org/wiki/Structural_type_system\n */\nexport class ProductType {\n  elements: ProductTypeElement[];\n\n  constructor(elements: ProductTypeElement[]) {\n    this.elements = elements;\n  }\n\n  isEmpty(): boolean {\n    return this.elements.length === 0;\n  }\n\n  serialize = (writer: BinaryWriter, value: object): void => {\n    for (let element of this.elements) {\n      element.algebraicType.serialize(writer, value[element.name]);\n    }\n  };\n\n  intoMapKey(value: any): ComparablePrimitive {\n    if (this.elements.length === 1) {\n      if (this.elements[0].name === '__time_duration_micros__') {\n        return (value as TimeDuration).__time_duration_micros__;\n      }\n\n      if (this.elements[0].name === '__timestamp_micros_since_unix_epoch__') {\n        return (value as Timestamp).__timestamp_micros_since_unix_epoch__;\n      }\n\n      if (this.elements[0].name === '__identity__') {\n        return (value as Identity).__identity__;\n      }\n\n      if (this.elements[0].name === '__connection_id__') {\n        return (value as ConnectionId).__connection_id__;\n      }\n    }\n    // The fallback is to serialize and base64 encode the bytes.\n    const writer = new BinaryWriter(10);\n    this.serialize(writer, value);\n    return writer.toBase64();\n  }\n\n  deserialize = (reader: BinaryReader): { [key: string]: any } => {\n    let result: { [key: string]: any } = {};\n    if (this.elements.length === 1) {\n      if (this.elements[0].name === '__time_duration_micros__') {\n        return new TimeDuration(reader.readI64());\n      }\n\n      if (this.elements[0].name === '__timestamp_micros_since_unix_epoch__') {\n        return new Timestamp(reader.readI64());\n      }\n\n      if (this.elements[0].name === '__identity__') {\n        return new Identity(reader.readU256());\n      }\n\n      if (this.elements[0].name === '__connection_id__') {\n        return new ConnectionId(reader.readU128());\n      }\n    }\n\n    for (let element of this.elements) {\n      result[element.name] = element.algebraicType.deserialize(reader);\n    }\n    return result;\n  };\n}\n\n/* A map type from keys of type `keyType` to values of type `valueType`. */\nexport class MapType {\n  keyType: AlgebraicType;\n  valueType: AlgebraicType;\n\n  constructor(keyType: AlgebraicType, valueType: AlgebraicType) {\n    this.keyType = keyType;\n    this.valueType = valueType;\n  }\n}\n\ntype ArrayBaseType = AlgebraicType;\ntype TypeRef = null;\ntype None = null;\nexport type EnumLabel = { label: string };\n\ntype AnyType =\n  | ProductType\n  | SumType\n  | ArrayBaseType\n  | MapType\n  | EnumLabel\n  | TypeRef\n  | None;\n\nexport type ComparablePrimitive = number | string | String | boolean | bigint;\n\n/**\n * The SpacetimeDB Algebraic Type System (SATS) is a structural type system in\n * which a nominal type system can be constructed.\n *\n * The type system unifies the concepts sum types, product types, and built-in\n * primitive types into a single type system.\n */\nexport class AlgebraicType {\n  type!: Type;\n  type_?: AnyType;\n\n  #setter(type: Type, payload: AnyType | undefined) {\n    this.type_ = payload;\n    this.type = payload === undefined ? Type.None : type;\n  }\n\n  get product(): ProductType {\n    if (this.type !== Type.ProductType) {\n      throw 'product type was requested, but the type is not ProductType';\n    }\n    return this.type_ as ProductType;\n  }\n\n  set product(value: ProductType | undefined) {\n    this.#setter(Type.ProductType, value);\n  }\n\n  get sum(): SumType {\n    if (this.type !== Type.SumType) {\n      throw 'sum type was requested, but the type is not SumType';\n    }\n    return this.type_ as SumType;\n  }\n  set sum(value: SumType | undefined) {\n    this.#setter(Type.SumType, value);\n  }\n\n  get array(): ArrayBaseType {\n    if (this.type !== Type.ArrayType) {\n      throw 'array type was requested, but the type is not ArrayType';\n    }\n    return this.type_ as ArrayBaseType;\n  }\n  set array(value: ArrayBaseType | undefined) {\n    this.#setter(Type.ArrayType, value);\n  }\n\n  get map(): MapType {\n    if (this.type !== Type.MapType) {\n      throw 'map type was requested, but the type is not MapType';\n    }\n    return this.type_ as MapType;\n  }\n  set map(value: MapType | undefined) {\n    this.#setter(Type.MapType, value);\n  }\n\n  static #createType(type: Type, payload: AnyType | undefined): AlgebraicType {\n    let at = new AlgebraicType();\n    at.#setter(type, payload);\n    return at;\n  }\n\n  static createProductType(elements: ProductTypeElement[]): AlgebraicType {\n    return this.#createType(Type.ProductType, new ProductType(elements));\n  }\n\n  static createSumType(variants: SumTypeVariant[]): AlgebraicType {\n    return this.#createType(Type.SumType, new SumType(variants));\n  }\n\n  static createArrayType(elementType: AlgebraicType): AlgebraicType {\n    return this.#createType(Type.ArrayType, elementType);\n  }\n\n  static createMapType(key: AlgebraicType, val: AlgebraicType): AlgebraicType {\n    return this.#createType(Type.MapType, new MapType(key, val));\n  }\n\n  static createBoolType(): AlgebraicType {\n    return this.#createType(Type.Bool, null);\n  }\n  static createI8Type(): AlgebraicType {\n    return this.#createType(Type.I8, null);\n  }\n  static createU8Type(): AlgebraicType {\n    return this.#createType(Type.U8, null);\n  }\n  static createI16Type(): AlgebraicType {\n    return this.#createType(Type.I16, null);\n  }\n  static createU16Type(): AlgebraicType {\n    return this.#createType(Type.U16, null);\n  }\n  static createI32Type(): AlgebraicType {\n    return this.#createType(Type.I32, null);\n  }\n  static createU32Type(): AlgebraicType {\n    return this.#createType(Type.U32, null);\n  }\n  static createI64Type(): AlgebraicType {\n    return this.#createType(Type.I64, null);\n  }\n  static createU64Type(): AlgebraicType {\n    return this.#createType(Type.U64, null);\n  }\n  static createI128Type(): AlgebraicType {\n    return this.#createType(Type.I128, null);\n  }\n  static createU128Type(): AlgebraicType {\n    return this.#createType(Type.U128, null);\n  }\n  static createI256Type(): AlgebraicType {\n    return this.#createType(Type.I256, null);\n  }\n  static createU256Type(): AlgebraicType {\n    return this.#createType(Type.U256, null);\n  }\n  static createF32Type(): AlgebraicType {\n    return this.#createType(Type.F32, null);\n  }\n  static createF64Type(): AlgebraicType {\n    return this.#createType(Type.F64, null);\n  }\n  static createStringType(): AlgebraicType {\n    return this.#createType(Type.String, null);\n  }\n  static createBytesType(): AlgebraicType {\n    return this.createArrayType(this.createU8Type());\n  }\n  static createOptionType(innerType: AlgebraicType): AlgebraicType {\n    return this.createSumType([\n      new SumTypeVariant('some', innerType),\n      new SumTypeVariant('none', this.createProductType([])),\n    ]);\n  }\n  static createIdentityType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement('__identity__', this.createU256Type()),\n    ]);\n  }\n\n  static createConnectionIdType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement('__connection_id__', this.createU128Type()),\n    ]);\n  }\n\n  static createScheduleAtType(): AlgebraicType {\n    return ScheduleAt.getAlgebraicType();\n  }\n\n  static createTimestampType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement(\n        '__timestamp_micros_since_unix_epoch__',\n        this.createI64Type()\n      ),\n    ]);\n  }\n\n  static createTimeDurationType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement('__time_duration_micros__', this.createI64Type()),\n    ]);\n  }\n\n  isProductType(): boolean {\n    return this.type === Type.ProductType;\n  }\n\n  isSumType(): boolean {\n    return this.type === Type.SumType;\n  }\n\n  isArrayType(): boolean {\n    return this.type === Type.ArrayType;\n  }\n\n  isMapType(): boolean {\n    return this.type === Type.MapType;\n  }\n\n  #isBytes(): boolean {\n    return this.isArrayType() && this.array.type == Type.U8;\n  }\n\n  #isBytesNewtype(tag: string): boolean {\n    return (\n      this.isProductType() &&\n      this.product.elements.length === 1 &&\n      (this.product.elements[0].algebraicType.type == Type.U128 ||\n        this.product.elements[0].algebraicType.type == Type.U256) &&\n      this.product.elements[0].name === tag\n    );\n  }\n\n  #isI64Newtype(tag: string): boolean {\n    return (\n      this.isProductType() &&\n      this.product.elements.length === 1 &&\n      this.product.elements[0].algebraicType.type === Type.I64 &&\n      this.product.elements[0].name === tag\n    );\n  }\n\n  isIdentity(): boolean {\n    return this.#isBytesNewtype('__identity__');\n  }\n\n  isConnectionId(): boolean {\n    return this.#isBytesNewtype('__connection_id__');\n  }\n\n  isScheduleAt(): boolean {\n    return (\n      this.isSumType() &&\n      this.sum.variants.length === 2 &&\n      this.sum.variants[0].name === 'Interval' &&\n      this.sum.variants[0].algebraicType.type === Type.U64 &&\n      this.sum.variants[1].name === 'Time' &&\n      this.sum.variants[1].algebraicType.type === Type.U64\n    );\n  }\n\n  isTimestamp(): boolean {\n    return this.#isI64Newtype('__timestamp_micros_since_unix_epoch__');\n  }\n\n  isTimeDuration(): boolean {\n    return this.#isI64Newtype('__time_duration_micros__');\n  }\n\n  /**\n   * Convert a value of the algebraic type into something that can be used as a key in a map.\n   * There are no guarantees about being able to order it.\n   * This is only guaranteed to be comparable to other values of the same type.\n   * @param value A value of the algebraic type\n   * @returns Something that can be used as a key in a map.\n   */\n  intoMapKey(value: any): ComparablePrimitive {\n    switch (this.type) {\n      case Type.U8:\n      case Type.U16:\n      case Type.U32:\n      case Type.U64:\n      case Type.U128:\n      case Type.U256:\n      case Type.I8:\n      case Type.I16:\n      case Type.I64:\n      case Type.I128:\n      case Type.F32:\n      case Type.F64:\n      case Type.String:\n      case Type.Bool:\n        return value;\n      case Type.ProductType:\n        return this.product.intoMapKey(value);\n      default:\n        const writer = new BinaryWriter(10);\n        this.serialize(writer, value);\n        return writer.toBase64();\n    }\n  }\n\n  serialize(writer: BinaryWriter, value: any): void {\n    switch (this.type) {\n      case Type.ProductType:\n        this.product.serialize(writer, value);\n        break;\n      case Type.SumType:\n        this.sum.serialize(writer, value);\n        break;\n      case Type.ArrayType:\n        if (this.#isBytes()) {\n          writer.writeUInt8Array(value);\n        } else {\n          const elemType = this.array;\n          writer.writeU32(value.length);\n          for (let elem of value) {\n            elemType.serialize(writer, elem);\n          }\n        }\n        break;\n      case Type.MapType:\n        throw new Error('not implemented');\n      case Type.Bool:\n        writer.writeBool(value);\n        break;\n      case Type.I8:\n        writer.writeI8(value);\n        break;\n      case Type.U8:\n        writer.writeU8(value);\n        break;\n      case Type.I16:\n        writer.writeI16(value);\n        break;\n      case Type.U16:\n        writer.writeU16(value);\n        break;\n      case Type.I32:\n        writer.writeI32(value);\n        break;\n      case Type.U32:\n        writer.writeU32(value);\n        break;\n      case Type.I64:\n        writer.writeI64(value);\n        break;\n      case Type.U64:\n        writer.writeU64(value);\n        break;\n      case Type.I128:\n        writer.writeI128(value);\n        break;\n      case Type.U128:\n        writer.writeU128(value);\n        break;\n      case Type.I256:\n        writer.writeI256(value);\n        break;\n      case Type.U256:\n        writer.writeU256(value);\n        break;\n      case Type.F32:\n        writer.writeF32(value);\n        break;\n      case Type.F64:\n        writer.writeF64(value);\n        break;\n      case Type.String:\n        writer.writeString(value);\n        break;\n      default:\n        throw new Error(`not implemented, ${this.type}`);\n    }\n  }\n\n  deserialize(reader: BinaryReader): any {\n    switch (this.type) {\n      case Type.ProductType:\n        return this.product.deserialize(reader);\n      case Type.SumType:\n        return this.sum.deserialize(reader);\n      case Type.ArrayType:\n        if (this.#isBytes()) {\n          return reader.readUInt8Array();\n        } else {\n          const elemType = this.array;\n          const length = reader.readU32();\n          let result: any[] = [];\n          for (let i = 0; i < length; i++) {\n            result.push(elemType.deserialize(reader));\n          }\n          return result;\n        }\n      case Type.MapType:\n        // TODO: MapType is being removed\n        throw new Error('not implemented');\n      case Type.Bool:\n        return reader.readBool();\n      case Type.I8:\n        return reader.readI8();\n      case Type.U8:\n        return reader.readU8();\n      case Type.I16:\n        return reader.readI16();\n      case Type.U16:\n        return reader.readU16();\n      case Type.I32:\n        return reader.readI32();\n      case Type.U32:\n        return reader.readU32();\n      case Type.I64:\n        return reader.readI64();\n      case Type.U64:\n        return reader.readU64();\n      case Type.I128:\n        return reader.readI128();\n      case Type.U128:\n        return reader.readU128();\n      case Type.U256:\n        return reader.readU256();\n      case Type.F32:\n        return reader.readF32();\n      case Type.F64:\n        return reader.readF64();\n      case Type.String:\n        return reader.readString();\n      default:\n        throw new Error(`not implemented, ${this.type}`);\n    }\n  }\n}\n\nexport namespace AlgebraicType {\n  export enum Type {\n    SumType = 'SumType',\n    ProductType = 'ProductType',\n    ArrayType = 'ArrayType',\n    MapType = 'MapType',\n    Bool = 'Bool',\n    I8 = 'I8',\n    U8 = 'U8',\n    I16 = 'I16',\n    U16 = 'U16',\n    I32 = 'I32',\n    U32 = 'U32',\n    I64 = 'I64',\n    U64 = 'U64',\n    I128 = 'I128',\n    U128 = 'U128',\n    I256 = 'I256',\n    U256 = 'U256',\n    F32 = 'F32',\n    F64 = 'F64',\n    /** UTF-8 encoded */\n    String = 'String',\n    None = 'None',\n  }\n}\n\n// No idea why but in order to have a local alias for both of these\n// need to be present\ntype Type = AlgebraicType.Type;\nlet Type: typeof AlgebraicType.Type = AlgebraicType.Type;\n","import { ConnectionId } from './connection_id';\nimport { AlgebraicType, ProductType, SumType } from './algebraic_type';\nimport BinaryReader from './binary_reader';\nimport { Identity } from './identity';\nimport { ScheduleAt } from './schedule_at';\n\nexport interface ReducerArgsAdapter {\n  next: () => ValueAdapter;\n}\n\nexport class BinaryReducerArgsAdapter {\n  adapter: BinaryAdapter;\n\n  constructor(adapter: BinaryAdapter) {\n    this.adapter = adapter;\n  }\n\n  next(): ValueAdapter {\n    return this.adapter;\n  }\n}\n\n/** Defines the interface for deserialize `AlgebraicValue`s*/\nexport interface ValueAdapter {\n  readUInt8Array: () => Uint8Array;\n  readArray: (type: AlgebraicType) => AlgebraicValue[];\n  readMap: (keyType: AlgebraicType, valueType: AlgebraicType) => MapValue;\n  readString: () => string;\n  readSum: (type: SumType) => SumValue;\n  readProduct: (type: ProductType) => ProductValue;\n\n  readBool: () => boolean;\n  readByte: () => number;\n  readI8: () => number;\n  readU8: () => number;\n  readI16: () => number;\n  readU16: () => number;\n  readI32: () => number;\n  readU32: () => number;\n  readI64: () => bigint;\n  readU64: () => bigint;\n  readU128: () => bigint;\n  readI128: () => bigint;\n  readF32: () => number;\n  readF64: () => number;\n\n  callMethod<K extends keyof ValueAdapter>(methodName: K): any;\n}\n\nexport class BinaryAdapter implements ValueAdapter {\n  #reader: BinaryReader;\n\n  constructor(reader: BinaryReader) {\n    this.#reader = reader;\n  }\n\n  callMethod<K extends keyof ValueAdapter>(methodName: K): any {\n    return (this[methodName] as Function)();\n  }\n\n  readUInt8Array(): Uint8Array {\n    return this.#reader.readUInt8Array();\n  }\n\n  readArray(type: AlgebraicType): AlgebraicValue[] {\n    const length = this.#reader.readU32();\n    let result: AlgebraicValue[] = [];\n    for (let i = 0; i < length; i++) {\n      result.push(AlgebraicValue.deserialize(type, this));\n    }\n\n    return result;\n  }\n\n  readMap(keyType: AlgebraicType, valueType: AlgebraicType): MapValue {\n    const mapLength = this.#reader.readU32();\n    let result: MapValue = new Map();\n    for (let i = 0; i < mapLength; i++) {\n      const key = AlgebraicValue.deserialize(keyType, this);\n      const value = AlgebraicValue.deserialize(valueType, this);\n      result.set(key, value);\n    }\n\n    return result;\n  }\n\n  readString(): string {\n    return this.#reader.readString();\n  }\n\n  readSum(type: SumType): SumValue {\n    let tag = this.#reader.readByte();\n    let sumValue = AlgebraicValue.deserialize(\n      type.variants[tag].algebraicType,\n      this\n    );\n    return new SumValue(tag, sumValue);\n  }\n\n  readProduct(type: ProductType): ProductValue {\n    let elements: AlgebraicValue[] = [];\n\n    for (let element of type.elements) {\n      elements.push(AlgebraicValue.deserialize(element.algebraicType, this));\n    }\n    return new ProductValue(elements);\n  }\n\n  readBool(): boolean {\n    return this.#reader.readBool();\n  }\n  readByte(): number {\n    return this.#reader.readByte();\n  }\n  readI8(): number {\n    return this.#reader.readI8();\n  }\n  readU8(): number {\n    return this.#reader.readU8();\n  }\n  readI16(): number {\n    return this.#reader.readI16();\n  }\n  readU16(): number {\n    return this.#reader.readU16();\n  }\n  readI32(): number {\n    return this.#reader.readI32();\n  }\n  readU32(): number {\n    return this.#reader.readU32();\n  }\n  readI64(): bigint {\n    return this.#reader.readI64();\n  }\n  readU64(): bigint {\n    return this.#reader.readU64();\n  }\n  readU128(): bigint {\n    return this.#reader.readU128();\n  }\n  readI128(): bigint {\n    return this.#reader.readI128();\n  }\n  readF32(): number {\n    return this.#reader.readF32();\n  }\n  readF64(): number {\n    return this.#reader.readF64();\n  }\n}\n\n/** A value of a sum type choosing a specific variant of the type. */\nexport class SumValue {\n  /** A tag representing the choice of one variant of the sum type's variants. */\n  tag: number;\n  /**\n   * Given a variant `Var(Ty)` in a sum type `{ Var(Ty), ... }`,\n   * this provides the `value` for `Ty`.\n   */\n  value: AlgebraicValue;\n\n  constructor(tag: number, value: AlgebraicValue) {\n    this.tag = tag;\n    this.value = value;\n  }\n\n  static deserialize(type: SumType, adapter: ValueAdapter): SumValue {\n    return adapter.readSum(type);\n  }\n}\n\n/**\n * A product value is made of a list of\n * \"elements\" / \"fields\" / \"factors\" of other `AlgebraicValue`s.\n *\n * The type of product value is a [product type](`ProductType`).\n */\nexport class ProductValue {\n  elements: AlgebraicValue[];\n\n  constructor(elements: AlgebraicValue[]) {\n    this.elements = elements;\n  }\n\n  static deserialize(type: ProductType, adapter: ValueAdapter): ProductValue {\n    return adapter.readProduct(type);\n  }\n}\n\nexport type MapValue = Map<AlgebraicValue, AlgebraicValue>;\n\ntype AnyValue =\n  | SumValue\n  | ProductValue\n  | AlgebraicValue[]\n  | Uint8Array\n  | MapValue\n  | string\n  | boolean\n  | number\n  | bigint;\n\n/** A value in SATS. */\nexport class AlgebraicValue {\n  value: AnyValue;\n\n  constructor(value: AnyValue | undefined) {\n    if (value === undefined) {\n      // TODO: possibly get rid of it\n      throw 'value is undefined';\n    }\n    this.value = value;\n  }\n\n  callMethod<K extends keyof AlgebraicValue>(methodName: K): any {\n    return (this[methodName] as Function)();\n  }\n\n  static deserialize(\n    type: AlgebraicType,\n    adapter: ValueAdapter\n  ): AlgebraicValue {\n    switch (type.type) {\n      case AlgebraicType.Type.ProductType:\n        return new this(ProductValue.deserialize(type.product, adapter));\n      case AlgebraicType.Type.SumType:\n        return new this(SumValue.deserialize(type.sum, adapter));\n      case AlgebraicType.Type.ArrayType:\n        let elemType = type.array;\n        if (elemType.type === AlgebraicType.Type.U8) {\n          return new this(adapter.readUInt8Array());\n        } else {\n          return new this(adapter.readArray(elemType));\n        }\n      case AlgebraicType.Type.MapType:\n        let mapType = type.map;\n        return new this(adapter.readMap(mapType.keyType, mapType.valueType));\n      case AlgebraicType.Type.Bool:\n        return new this(adapter.readBool());\n      case AlgebraicType.Type.I8:\n        return new this(adapter.readI8());\n      case AlgebraicType.Type.U8:\n        return new this(adapter.readU8());\n      case AlgebraicType.Type.I16:\n        return new this(adapter.readI16());\n      case AlgebraicType.Type.U16:\n        return new this(adapter.readU16());\n      case AlgebraicType.Type.I32:\n        return new this(adapter.readI32());\n      case AlgebraicType.Type.U32:\n        return new this(adapter.readU32());\n      case AlgebraicType.Type.I64:\n        return new this(adapter.readI64());\n      case AlgebraicType.Type.U64:\n        return new this(adapter.readU64());\n      case AlgebraicType.Type.I128:\n        return new this(adapter.readI128());\n      case AlgebraicType.Type.U128:\n        return new this(adapter.readU128());\n      case AlgebraicType.Type.String:\n        return new this(adapter.readString());\n      default:\n        throw new Error(`not implemented, ${type.type}`);\n    }\n  }\n\n  // TODO: all of the following methods should actually check the type of `self.value`\n  // and throw if it does not match.\n\n  asProductValue(): ProductValue {\n    return this.value as ProductValue;\n  }\n\n  asField(index: number): AlgebraicValue {\n    return this.asProductValue().elements[index];\n  }\n\n  asSumValue(): SumValue {\n    return this.value as SumValue;\n  }\n\n  asArray(): AlgebraicValue[] {\n    return this.value as AlgebraicValue[];\n  }\n\n  asMap(): MapValue {\n    return this.value as MapValue;\n  }\n\n  asString(): string {\n    return this.value as string;\n  }\n\n  asBoolean(): boolean {\n    return this.value as boolean;\n  }\n\n  asNumber(): number {\n    return this.value as number;\n  }\n\n  asBytes(): Uint8Array {\n    return this.value as Uint8Array;\n  }\n\n  asBigInt(): bigint {\n    return this.value as bigint;\n  }\n\n  asIdentity(): Identity {\n    return new Identity(this.asField(0).asBigInt());\n  }\n\n  asConnectionId(): ConnectionId {\n    return new ConnectionId(this.asField(0).asBigInt());\n  }\n\n  asScheduleAt(): ScheduleAt {\n    return ScheduleAt.fromValue(this);\n  }\n}\n\nexport interface ParseableType<T> {\n  deserialize: (reader: BinaryReader) => T;\n}\n\nexport function parseValue<T>(ty: ParseableType<T>, src: Uint8Array): T {\n  const reader = new BinaryReader(src);\n  return ty.deserialize(reader);\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\n// A namespace for generated variants and helper functions.\nexport namespace RowSizeHint {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type FixedSize = { tag: 'FixedSize'; value: number };\n  export type RowOffsets = { tag: 'RowOffsets'; value: bigint[] };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const FixedSize = (value: number): RowSizeHint => ({\n    tag: 'FixedSize',\n    value,\n  });\n  export const RowOffsets = (value: bigint[]): RowSizeHint => ({\n    tag: 'RowOffsets',\n    value,\n  });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant('FixedSize', AlgebraicType.createU16Type()),\n      new SumTypeVariant(\n        'RowOffsets',\n        AlgebraicType.createArrayType(AlgebraicType.createU64Type())\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: RowSizeHint): void {\n    RowSizeHint.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): RowSizeHint {\n    return RowSizeHint.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `RowSizeHint`.\nexport type RowSizeHint = RowSizeHint.FixedSize | RowSizeHint.RowOffsets;\n\nexport default RowSizeHint;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { RowSizeHint as __RowSizeHint } from './row_size_hint_type';\n\nexport type BsatnRowList = {\n  sizeHint: __RowSizeHint;\n  rowsData: Uint8Array;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace BsatnRowList {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'sizeHint',\n        __RowSizeHint.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'rowsData',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: BsatnRowList): void {\n    BsatnRowList.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): BsatnRowList {\n    return BsatnRowList.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type CallReducer = {\n  reducer: string;\n  args: Uint8Array;\n  requestId: number;\n  flags: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace CallReducer {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('reducer', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'args',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('flags', AlgebraicType.createU8Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: CallReducer): void {\n    CallReducer.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): CallReducer {\n    return CallReducer.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type Subscribe = {\n  queryStrings: string[];\n  requestId: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace Subscribe {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'queryStrings',\n        AlgebraicType.createArrayType(AlgebraicType.createStringType())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: Subscribe): void {\n    Subscribe.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): Subscribe {\n    return Subscribe.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type OneOffQuery = {\n  messageId: Uint8Array;\n  queryString: string;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace OneOffQuery {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'messageId',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement('queryString', AlgebraicType.createStringType()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: OneOffQuery): void {\n    OneOffQuery.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): OneOffQuery {\n    return OneOffQuery.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type QueryId = {\n  id: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace QueryId {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('id', AlgebraicType.createU32Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: QueryId): void {\n    QueryId.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): QueryId {\n    return QueryId.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type SubscribeSingle = {\n  query: string;\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeSingle {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('query', AlgebraicType.createStringType()),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscribeSingle\n  ): void {\n    SubscribeSingle.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeSingle {\n    return SubscribeSingle.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type SubscribeMulti = {\n  queryStrings: string[];\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeMulti {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'queryStrings',\n        AlgebraicType.createArrayType(AlgebraicType.createStringType())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: SubscribeMulti): void {\n    SubscribeMulti.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeMulti {\n    return SubscribeMulti.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type Unsubscribe = {\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace Unsubscribe {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: Unsubscribe): void {\n    Unsubscribe.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): Unsubscribe {\n    return Unsubscribe.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type UnsubscribeMulti = {\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace UnsubscribeMulti {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: UnsubscribeMulti\n  ): void {\n    UnsubscribeMulti.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): UnsubscribeMulti {\n    return UnsubscribeMulti.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { CallReducer as __CallReducer } from './call_reducer_type';\nimport { Subscribe as __Subscribe } from './subscribe_type';\nimport { OneOffQuery as __OneOffQuery } from './one_off_query_type';\nimport { SubscribeSingle as __SubscribeSingle } from './subscribe_single_type';\nimport { SubscribeMulti as __SubscribeMulti } from './subscribe_multi_type';\nimport { Unsubscribe as __Unsubscribe } from './unsubscribe_type';\nimport { UnsubscribeMulti as __UnsubscribeMulti } from './unsubscribe_multi_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace ClientMessage {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type CallReducer = { tag: 'CallReducer'; value: __CallReducer };\n  export type Subscribe = { tag: 'Subscribe'; value: __Subscribe };\n  export type OneOffQuery = { tag: 'OneOffQuery'; value: __OneOffQuery };\n  export type SubscribeSingle = {\n    tag: 'SubscribeSingle';\n    value: __SubscribeSingle;\n  };\n  export type SubscribeMulti = {\n    tag: 'SubscribeMulti';\n    value: __SubscribeMulti;\n  };\n  export type Unsubscribe = { tag: 'Unsubscribe'; value: __Unsubscribe };\n  export type UnsubscribeMulti = {\n    tag: 'UnsubscribeMulti';\n    value: __UnsubscribeMulti;\n  };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const CallReducer = (value: __CallReducer): ClientMessage => ({\n    tag: 'CallReducer',\n    value,\n  });\n  export const Subscribe = (value: __Subscribe): ClientMessage => ({\n    tag: 'Subscribe',\n    value,\n  });\n  export const OneOffQuery = (value: __OneOffQuery): ClientMessage => ({\n    tag: 'OneOffQuery',\n    value,\n  });\n  export const SubscribeSingle = (value: __SubscribeSingle): ClientMessage => ({\n    tag: 'SubscribeSingle',\n    value,\n  });\n  export const SubscribeMulti = (value: __SubscribeMulti): ClientMessage => ({\n    tag: 'SubscribeMulti',\n    value,\n  });\n  export const Unsubscribe = (value: __Unsubscribe): ClientMessage => ({\n    tag: 'Unsubscribe',\n    value,\n  });\n  export const UnsubscribeMulti = (\n    value: __UnsubscribeMulti\n  ): ClientMessage => ({ tag: 'UnsubscribeMulti', value });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'CallReducer',\n        __CallReducer.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant('Subscribe', __Subscribe.getTypeScriptAlgebraicType()),\n      new SumTypeVariant(\n        'OneOffQuery',\n        __OneOffQuery.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeSingle',\n        __SubscribeSingle.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeMulti',\n        __SubscribeMulti.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'Unsubscribe',\n        __Unsubscribe.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'UnsubscribeMulti',\n        __UnsubscribeMulti.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: ClientMessage): void {\n    ClientMessage.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): ClientMessage {\n    return ClientMessage.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `ClientMessage`.\nexport type ClientMessage =\n  | ClientMessage.CallReducer\n  | ClientMessage.Subscribe\n  | ClientMessage.OneOffQuery\n  | ClientMessage.SubscribeSingle\n  | ClientMessage.SubscribeMulti\n  | ClientMessage.Unsubscribe\n  | ClientMessage.UnsubscribeMulti;\n\nexport default ClientMessage;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { BsatnRowList as __BsatnRowList } from './bsatn_row_list_type';\n\nexport type QueryUpdate = {\n  deletes: __BsatnRowList;\n  inserts: __BsatnRowList;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace QueryUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'deletes',\n        __BsatnRowList.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'inserts',\n        __BsatnRowList.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: QueryUpdate): void {\n    QueryUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): QueryUpdate {\n    return QueryUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryUpdate as __QueryUpdate } from './query_update_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace CompressableQueryUpdate {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type Uncompressed = { tag: 'Uncompressed'; value: __QueryUpdate };\n  export type Brotli = { tag: 'Brotli'; value: Uint8Array };\n  export type Gzip = { tag: 'Gzip'; value: Uint8Array };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const Uncompressed = (\n    value: __QueryUpdate\n  ): CompressableQueryUpdate => ({ tag: 'Uncompressed', value });\n  export const Brotli = (value: Uint8Array): CompressableQueryUpdate => ({\n    tag: 'Brotli',\n    value,\n  });\n  export const Gzip = (value: Uint8Array): CompressableQueryUpdate => ({\n    tag: 'Gzip',\n    value,\n  });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'Uncompressed',\n        __QueryUpdate.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'Brotli',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new SumTypeVariant(\n        'Gzip',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: CompressableQueryUpdate\n  ): void {\n    CompressableQueryUpdate.getTypeScriptAlgebraicType().serialize(\n      writer,\n      value\n    );\n  }\n\n  export function deserialize(reader: BinaryReader): CompressableQueryUpdate {\n    return CompressableQueryUpdate.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n\n// The tagged union or sum type for the algebraic type `CompressableQueryUpdate`.\nexport type CompressableQueryUpdate =\n  | CompressableQueryUpdate.Uncompressed\n  | CompressableQueryUpdate.Brotli\n  | CompressableQueryUpdate.Gzip;\n\nexport default CompressableQueryUpdate;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { CompressableQueryUpdate as __CompressableQueryUpdate } from './compressable_query_update_type';\n\nexport type TableUpdate = {\n  tableId: number;\n  tableName: string;\n  numRows: bigint;\n  updates: __CompressableQueryUpdate[];\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace TableUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('tableId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('tableName', AlgebraicType.createStringType()),\n      new ProductTypeElement('numRows', AlgebraicType.createU64Type()),\n      new ProductTypeElement(\n        'updates',\n        AlgebraicType.createArrayType(\n          __CompressableQueryUpdate.getTypeScriptAlgebraicType()\n        )\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: TableUpdate): void {\n    TableUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): TableUpdate {\n    return TableUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { TableUpdate as __TableUpdate } from './table_update_type';\n\nexport type DatabaseUpdate = {\n  tables: __TableUpdate[];\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace DatabaseUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'tables',\n        AlgebraicType.createArrayType(\n          __TableUpdate.getTypeScriptAlgebraicType()\n        )\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: DatabaseUpdate): void {\n    DatabaseUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): DatabaseUpdate {\n    return DatabaseUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type InitialSubscription = {\n  databaseUpdate: __DatabaseUpdate;\n  requestId: number;\n  totalHostExecutionDuration: TimeDuration;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace InitialSubscription {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'databaseUpdate',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDuration',\n        AlgebraicType.createTimeDurationType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: InitialSubscription\n  ): void {\n    InitialSubscription.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): InitialSubscription {\n    return InitialSubscription.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace UpdateStatus {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type Committed = { tag: 'Committed'; value: __DatabaseUpdate };\n  export type Failed = { tag: 'Failed'; value: string };\n  export type OutOfEnergy = { tag: 'OutOfEnergy' };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const Committed = (value: __DatabaseUpdate): UpdateStatus => ({\n    tag: 'Committed',\n    value,\n  });\n  export const Failed = (value: string): UpdateStatus => ({\n    tag: 'Failed',\n    value,\n  });\n  export const OutOfEnergy = { tag: 'OutOfEnergy' };\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'Committed',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant('Failed', AlgebraicType.createStringType()),\n      new SumTypeVariant('OutOfEnergy', AlgebraicType.createProductType([])),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: UpdateStatus): void {\n    UpdateStatus.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): UpdateStatus {\n    return UpdateStatus.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `UpdateStatus`.\nexport type UpdateStatus =\n  | UpdateStatus.Committed\n  | UpdateStatus.Failed\n  | UpdateStatus.OutOfEnergy;\n\nexport default UpdateStatus;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type ReducerCallInfo = {\n  reducerName: string;\n  reducerId: number;\n  args: Uint8Array;\n  requestId: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace ReducerCallInfo {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('reducerName', AlgebraicType.createStringType()),\n      new ProductTypeElement('reducerId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'args',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: ReducerCallInfo\n  ): void {\n    ReducerCallInfo.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): ReducerCallInfo {\n    return ReducerCallInfo.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type EnergyQuanta = {\n  quanta: bigint;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace EnergyQuanta {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('quanta', AlgebraicType.createU128Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: EnergyQuanta): void {\n    EnergyQuanta.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): EnergyQuanta {\n    return EnergyQuanta.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { UpdateStatus as __UpdateStatus } from './update_status_type';\nimport { ReducerCallInfo as __ReducerCallInfo } from './reducer_call_info_type';\nimport { EnergyQuanta as __EnergyQuanta } from './energy_quanta_type';\n\nexport type TransactionUpdate = {\n  status: __UpdateStatus;\n  timestamp: Timestamp;\n  callerIdentity: Identity;\n  callerConnectionId: ConnectionId;\n  reducerCall: __ReducerCallInfo;\n  energyQuantaUsed: __EnergyQuanta;\n  totalHostExecutionDuration: TimeDuration;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace TransactionUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'status',\n        __UpdateStatus.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement('timestamp', AlgebraicType.createTimestampType()),\n      new ProductTypeElement(\n        'callerIdentity',\n        AlgebraicType.createIdentityType()\n      ),\n      new ProductTypeElement(\n        'callerConnectionId',\n        AlgebraicType.createConnectionIdType()\n      ),\n      new ProductTypeElement(\n        'reducerCall',\n        __ReducerCallInfo.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'energyQuantaUsed',\n        __EnergyQuanta.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'totalHostExecutionDuration',\n        AlgebraicType.createTimeDurationType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: TransactionUpdate\n  ): void {\n    TransactionUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): TransactionUpdate {\n    return TransactionUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type TransactionUpdateLight = {\n  requestId: number;\n  update: __DatabaseUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace TransactionUpdateLight {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'update',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: TransactionUpdateLight\n  ): void {\n    TransactionUpdateLight.getTypeScriptAlgebraicType().serialize(\n      writer,\n      value\n    );\n  }\n\n  export function deserialize(reader: BinaryReader): TransactionUpdateLight {\n    return TransactionUpdateLight.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type IdentityToken = {\n  identity: Identity;\n  token: string;\n  connectionId: ConnectionId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace IdentityToken {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('identity', AlgebraicType.createIdentityType()),\n      new ProductTypeElement('token', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'connectionId',\n        AlgebraicType.createConnectionIdType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: IdentityToken): void {\n    IdentityToken.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): IdentityToken {\n    return IdentityToken.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { BsatnRowList as __BsatnRowList } from './bsatn_row_list_type';\n\nexport type OneOffTable = {\n  tableName: string;\n  rows: __BsatnRowList;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace OneOffTable {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('tableName', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'rows',\n        __BsatnRowList.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: OneOffTable): void {\n    OneOffTable.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): OneOffTable {\n    return OneOffTable.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { OneOffTable as __OneOffTable } from './one_off_table_type';\n\nexport type OneOffQueryResponse = {\n  messageId: Uint8Array;\n  error: string | undefined;\n  tables: __OneOffTable[];\n  totalHostExecutionDuration: TimeDuration;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace OneOffQueryResponse {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'messageId',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement(\n        'error',\n        AlgebraicType.createOptionType(AlgebraicType.createStringType())\n      ),\n      new ProductTypeElement(\n        'tables',\n        AlgebraicType.createArrayType(\n          __OneOffTable.getTypeScriptAlgebraicType()\n        )\n      ),\n      new ProductTypeElement(\n        'totalHostExecutionDuration',\n        AlgebraicType.createTimeDurationType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: OneOffQueryResponse\n  ): void {\n    OneOffQueryResponse.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): OneOffQueryResponse {\n    return OneOffQueryResponse.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { TableUpdate as __TableUpdate } from './table_update_type';\n\nexport type SubscribeRows = {\n  tableId: number;\n  tableName: string;\n  tableRows: __TableUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeRows {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('tableId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('tableName', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'tableRows',\n        __TableUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: SubscribeRows): void {\n    SubscribeRows.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeRows {\n    return SubscribeRows.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { SubscribeRows as __SubscribeRows } from './subscribe_rows_type';\n\nexport type SubscribeApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  rows: __SubscribeRows;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'rows',\n        __SubscribeRows.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscribeApplied\n  ): void {\n    SubscribeApplied.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeApplied {\n    return SubscribeApplied.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { SubscribeRows as __SubscribeRows } from './subscribe_rows_type';\n\nexport type UnsubscribeApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  rows: __SubscribeRows;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace UnsubscribeApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'rows',\n        __SubscribeRows.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: UnsubscribeApplied\n  ): void {\n    UnsubscribeApplied.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): UnsubscribeApplied {\n    return UnsubscribeApplied.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type SubscriptionError = {\n  totalHostExecutionDurationMicros: bigint;\n  requestId: number | undefined;\n  queryId: number | undefined;\n  tableId: number | undefined;\n  error: string;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscriptionError {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement(\n        'requestId',\n        AlgebraicType.createOptionType(AlgebraicType.createU32Type())\n      ),\n      new ProductTypeElement(\n        'queryId',\n        AlgebraicType.createOptionType(AlgebraicType.createU32Type())\n      ),\n      new ProductTypeElement(\n        'tableId',\n        AlgebraicType.createOptionType(AlgebraicType.createU32Type())\n      ),\n      new ProductTypeElement('error', AlgebraicType.createStringType()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscriptionError\n  ): void {\n    SubscriptionError.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscriptionError {\n    return SubscriptionError.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type SubscribeMultiApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  update: __DatabaseUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeMultiApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'update',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscribeMultiApplied\n  ): void {\n    SubscribeMultiApplied.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeMultiApplied {\n    return SubscribeMultiApplied.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type UnsubscribeMultiApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  update: __DatabaseUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace UnsubscribeMultiApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'update',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: UnsubscribeMultiApplied\n  ): void {\n    UnsubscribeMultiApplied.getTypeScriptAlgebraicType().serialize(\n      writer,\n      value\n    );\n  }\n\n  export function deserialize(reader: BinaryReader): UnsubscribeMultiApplied {\n    return UnsubscribeMultiApplied.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { InitialSubscription as __InitialSubscription } from './initial_subscription_type';\nimport { TransactionUpdate as __TransactionUpdate } from './transaction_update_type';\nimport { TransactionUpdateLight as __TransactionUpdateLight } from './transaction_update_light_type';\nimport { IdentityToken as __IdentityToken } from './identity_token_type';\nimport { OneOffQueryResponse as __OneOffQueryResponse } from './one_off_query_response_type';\nimport { SubscribeApplied as __SubscribeApplied } from './subscribe_applied_type';\nimport { UnsubscribeApplied as __UnsubscribeApplied } from './unsubscribe_applied_type';\nimport { SubscriptionError as __SubscriptionError } from './subscription_error_type';\nimport { SubscribeMultiApplied as __SubscribeMultiApplied } from './subscribe_multi_applied_type';\nimport { UnsubscribeMultiApplied as __UnsubscribeMultiApplied } from './unsubscribe_multi_applied_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace ServerMessage {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type InitialSubscription = {\n    tag: 'InitialSubscription';\n    value: __InitialSubscription;\n  };\n  export type TransactionUpdate = {\n    tag: 'TransactionUpdate';\n    value: __TransactionUpdate;\n  };\n  export type TransactionUpdateLight = {\n    tag: 'TransactionUpdateLight';\n    value: __TransactionUpdateLight;\n  };\n  export type IdentityToken = { tag: 'IdentityToken'; value: __IdentityToken };\n  export type OneOffQueryResponse = {\n    tag: 'OneOffQueryResponse';\n    value: __OneOffQueryResponse;\n  };\n  export type SubscribeApplied = {\n    tag: 'SubscribeApplied';\n    value: __SubscribeApplied;\n  };\n  export type UnsubscribeApplied = {\n    tag: 'UnsubscribeApplied';\n    value: __UnsubscribeApplied;\n  };\n  export type SubscriptionError = {\n    tag: 'SubscriptionError';\n    value: __SubscriptionError;\n  };\n  export type SubscribeMultiApplied = {\n    tag: 'SubscribeMultiApplied';\n    value: __SubscribeMultiApplied;\n  };\n  export type UnsubscribeMultiApplied = {\n    tag: 'UnsubscribeMultiApplied';\n    value: __UnsubscribeMultiApplied;\n  };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const InitialSubscription = (\n    value: __InitialSubscription\n  ): ServerMessage => ({ tag: 'InitialSubscription', value });\n  export const TransactionUpdate = (\n    value: __TransactionUpdate\n  ): ServerMessage => ({ tag: 'TransactionUpdate', value });\n  export const TransactionUpdateLight = (\n    value: __TransactionUpdateLight\n  ): ServerMessage => ({ tag: 'TransactionUpdateLight', value });\n  export const IdentityToken = (value: __IdentityToken): ServerMessage => ({\n    tag: 'IdentityToken',\n    value,\n  });\n  export const OneOffQueryResponse = (\n    value: __OneOffQueryResponse\n  ): ServerMessage => ({ tag: 'OneOffQueryResponse', value });\n  export const SubscribeApplied = (\n    value: __SubscribeApplied\n  ): ServerMessage => ({ tag: 'SubscribeApplied', value });\n  export const UnsubscribeApplied = (\n    value: __UnsubscribeApplied\n  ): ServerMessage => ({ tag: 'UnsubscribeApplied', value });\n  export const SubscriptionError = (\n    value: __SubscriptionError\n  ): ServerMessage => ({ tag: 'SubscriptionError', value });\n  export const SubscribeMultiApplied = (\n    value: __SubscribeMultiApplied\n  ): ServerMessage => ({ tag: 'SubscribeMultiApplied', value });\n  export const UnsubscribeMultiApplied = (\n    value: __UnsubscribeMultiApplied\n  ): ServerMessage => ({ tag: 'UnsubscribeMultiApplied', value });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'InitialSubscription',\n        __InitialSubscription.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'TransactionUpdate',\n        __TransactionUpdate.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'TransactionUpdateLight',\n        __TransactionUpdateLight.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'IdentityToken',\n        __IdentityToken.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'OneOffQueryResponse',\n        __OneOffQueryResponse.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeApplied',\n        __SubscribeApplied.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'UnsubscribeApplied',\n        __UnsubscribeApplied.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscriptionError',\n        __SubscriptionError.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeMultiApplied',\n        __SubscribeMultiApplied.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'UnsubscribeMultiApplied',\n        __UnsubscribeMultiApplied.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: ServerMessage): void {\n    ServerMessage.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): ServerMessage {\n    return ServerMessage.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `ServerMessage`.\nexport type ServerMessage =\n  | ServerMessage.InitialSubscription\n  | ServerMessage.TransactionUpdate\n  | ServerMessage.TransactionUpdateLight\n  | ServerMessage.IdentityToken\n  | ServerMessage.OneOffQueryResponse\n  | ServerMessage.SubscribeApplied\n  | ServerMessage.UnsubscribeApplied\n  | ServerMessage.SubscriptionError\n  | ServerMessage.SubscribeMultiApplied\n  | ServerMessage.UnsubscribeMultiApplied;\n\nexport default ServerMessage;\n","export class EventEmitter<Key, Callback extends Function = Function> {\n  #events: Map<Key, Set<Callback>> = new Map();\n\n  on(event: Key, callback: Callback): void {\n    let callbacks = this.#events.get(event);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.#events.set(event, callbacks);\n    }\n    callbacks.add(callback);\n  }\n\n  off(event: Key, callback: Callback): void {\n    let callbacks = this.#events.get(event);\n    if (!callbacks) {\n      return;\n    }\n    callbacks.delete(callback);\n  }\n\n  emit(event: Key, ...args: any[]): void {\n    let callbacks = this.#events.get(event);\n    if (!callbacks) {\n      return;\n    }\n\n    for (let callback of callbacks) {\n      callback(...args);\n    }\n  }\n}\n","type LogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nconst LogLevelIdentifierIcon = {\n  component: '📦',\n  info: 'ℹ️',\n  warn: '⚠️',\n  error: '❌',\n  debug: '🐛',\n};\n\nconst LogStyle = {\n  component:\n    'color: #fff; background-color: #8D6FDD; padding: 2px 5px; border-radius: 3px;',\n  info: 'color: #fff; background-color: #007bff; padding: 2px 5px; border-radius: 3px;',\n  warn: 'color: #fff; background-color: #ffc107; padding: 2px 5px; border-radius: 3px;',\n  error:\n    'color: #fff; background-color: #dc3545; padding: 2px 5px; border-radius: 3px;',\n  debug:\n    'color: #fff; background-color: #28a745; padding: 2px 5px; border-radius: 3px;',\n};\n\nconst LogTextStyle = {\n  component: 'color: #8D6FDD;',\n  info: 'color: #007bff;',\n  warn: 'color: #ffc107;',\n  error: 'color: #dc3545;',\n  debug: 'color: #28a745;',\n};\n\nexport const stdbLogger = (level: LogLevel, message: any): void => {\n  console.log(\n    `%c${LogLevelIdentifierIcon[level]} ${level.toUpperCase()}%c ${message}`,\n    LogStyle[level],\n    LogTextStyle[level]\n  );\n};\n","import { EventEmitter } from './event_emitter.ts';\nimport type { TableRuntimeTypeInfo } from './spacetime_module.ts';\n\nimport {\n  BinaryWriter,\n  type EventContextInterface,\n} from './db_connection_impl.ts';\nimport { stdbLogger } from './logger.ts';\nimport type { ComparablePrimitive } from './algebraic_type.ts';\n\nexport type Operation = {\n  type: 'insert' | 'delete';\n  // For tables with a primary key, this is the primary key value, as a primitive or string.\n  // Otherwise, it is an encoding of the full row.\n  rowId: ComparablePrimitive;\n  // TODO: Refine this type to at least reflect that it is a product.\n  row: any;\n};\n\nexport type TableUpdate = {\n  tableName: string;\n  operations: Operation[];\n};\n\nexport type PendingCallback = {\n  type: 'insert' | 'delete' | 'update';\n  table: string;\n  cb: () => void;\n};\n/**\n * Builder to generate calls to query a `table` in the database\n */\nexport class TableCache<RowType = any> {\n  private rows: Map<ComparablePrimitive, [RowType, number]>;\n  private tableTypeInfo: TableRuntimeTypeInfo;\n  private emitter: EventEmitter<'insert' | 'delete' | 'update'>;\n\n  /**\n   * @param name the table name\n   * @param primaryKeyCol column index designated as `#[primarykey]`\n   * @param primaryKey column name designated as `#[primarykey]`\n   * @param entityClass the entityClass\n   */\n  constructor(tableTypeInfo: TableRuntimeTypeInfo) {\n    this.tableTypeInfo = tableTypeInfo;\n    this.rows = new Map();\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * @returns number of rows in the table\n   */\n  count(): number {\n    return this.rows.size;\n  }\n\n  /**\n   * @returns The values of the rows in the table\n   */\n  iter(): any[] {\n    return Array.from(this.rows.values()).map(([row]) => row);\n  }\n\n  applyOperations = (\n    operations: Operation[],\n    ctx: EventContextInterface\n  ): PendingCallback[] => {\n    const pendingCallbacks: PendingCallback[] = [];\n    if (this.tableTypeInfo.primaryKeyInfo !== undefined) {\n      const insertMap = new Map<ComparablePrimitive, [Operation, number]>();\n      const deleteMap = new Map<ComparablePrimitive, [Operation, number]>();\n      for (const op of operations) {\n        if (op.type === 'insert') {\n          const [_, prevCount] = insertMap.get(op.rowId) || [op, 0];\n          insertMap.set(op.rowId, [op, prevCount + 1]);\n        } else {\n          const [_, prevCount] = deleteMap.get(op.rowId) || [op, 0];\n          deleteMap.set(op.rowId, [op, prevCount + 1]);\n        }\n      }\n      for (const [primaryKey, [insertOp, refCount]] of insertMap) {\n        const deleteEntry = deleteMap.get(primaryKey);\n        if (deleteEntry) {\n          const [_, deleteCount] = deleteEntry;\n          // In most cases the refCountDelta will be either 0 or refCount, but if\n          // an update moves a row in or out of the result set of different queries, then\n          // other deltas are possible.\n          const refCountDelta = refCount - deleteCount;\n          const maybeCb = this.update(\n            ctx,\n            primaryKey,\n            insertOp.row,\n            refCountDelta\n          );\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n          deleteMap.delete(primaryKey);\n        } else {\n          const maybeCb = this.insert(ctx, insertOp, refCount);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n        }\n      }\n      for (const [deleteOp, refCount] of deleteMap.values()) {\n        const maybeCb = this.delete(ctx, deleteOp, refCount);\n        if (maybeCb) {\n          pendingCallbacks.push(maybeCb);\n        }\n      }\n    } else {\n      for (const op of operations) {\n        if (op.type === 'insert') {\n          const maybeCb = this.insert(ctx, op);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n        } else {\n          const maybeCb = this.delete(ctx, op);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n        }\n      }\n    }\n    return pendingCallbacks;\n  };\n\n  update = (\n    ctx: EventContextInterface,\n    rowId: ComparablePrimitive,\n    newRow: RowType,\n    refCountDelta: number = 0\n  ): PendingCallback | undefined => {\n    // const existingEntry = this.rows.get(rowId);\n    // if (!existingEntry) {\n    //   // TODO: this should throw an error and kill the connection.\n    //   stdbLogger(\n    //     'error',\n    //     `Updating a row that was not present in the cache. Table: ${this.tableTypeInfo.tableName}, RowId: ${rowId}`\n    //   );\n    //   return undefined;\n    // }\n    // const [oldRow, previousCount] = existingEntry;\n    // const refCount = Math.max(1, previousCount + refCountDelta);\n    // if (previousCount + refCountDelta <= 0) {\n    //   stdbLogger(\n    //     'error',\n    //     `Negative reference count for in table ${this.tableTypeInfo.tableName} row ${rowId} (${previousCount} + ${refCountDelta})`\n    //   );\n    //   return undefined;\n    // }\n    // this.rows.set(rowId, [newRow, refCount]);\n    // // This indicates something is wrong, so we could arguably crash here.\n    // if (previousCount === 0) {\n    //   stdbLogger(\n    //     'error',\n    //     `Updating a row id in table ${this.tableTypeInfo.tableName} which was not present in the cache (rowId: ${rowId})`\n    //   );\n    //   return {\n    //     type: 'insert',\n    //     table: this.tableTypeInfo.tableName,\n    //     cb: () => {\n    //       this.emitter.emit('insert', ctx, newRow);\n    //     },\n    //   };\n    // }\n    return {\n      type: 'update',\n      table: this.tableTypeInfo.tableName,\n      cb: () => {\n        // this.emitter.emit('update', ctx, oldRow, newRow);\n        this.emitter.emit('update', ctx, undefined, newRow);\n      },\n    };\n  };\n\n  insert = (\n    ctx: EventContextInterface,\n    operation: Operation,\n    count: number = 1\n  ): PendingCallback | undefined => {\n    // const [_, previousCount] = this.rows.get(operation.rowId) || [\n    //   operation.row,\n    //   0,\n    // ];\n    // this.rows.set(operation.rowId, [operation.row, previousCount + count]);\n    // if (previousCount === 0) {\n      return {\n        type: 'insert',\n        table: this.tableTypeInfo.tableName,\n        cb: () => {\n          this.emitter.emit('insert', ctx, operation.row);\n        },\n      };\n    // }\n    // // It's possible to get a duplicate insert because rows can be returned from multiple queries.\n    // return undefined;\n  };\n\n  delete = (\n    ctx: EventContextInterface,\n    operation: Operation,\n    count: number = 1\n  ): PendingCallback | undefined => {\n    // const [_, previousCount] = this.rows.get(operation.rowId) || [\n    //   operation.row,\n    //   0,\n    // ];\n    // // This should never happen.\n    // if (previousCount === 0) {\n    //   stdbLogger('warn', 'Deleting a row that was not present in the cache');\n    //   return undefined;\n    // }\n    // // If this was the last reference, we are actually deleting the row.\n    // if (previousCount <= count) {\n    //   // TODO: Log a warning/error if previousCount is less than count.\n    //   this.rows.delete(operation.rowId);\n      return {\n        type: 'delete',\n        table: this.tableTypeInfo.tableName,\n        cb: () => {\n          this.emitter.emit('delete', ctx, operation.row);\n        },\n      };\n    // }\n    // this.rows.set(operation.rowId, [operation.row, previousCount - count]);\n    // return undefined;\n  };\n\n  /**\n   * Register a callback for when a row is newly inserted into the database.\n   *\n   * ```ts\n   * User.onInsert((user, reducerEvent) => {\n   *   if (reducerEvent) {\n   *      console.log(\"New user on reducer\", reducerEvent, user);\n   *   } else {\n   *      console.log(\"New user received during subscription update on insert\", user);\n   *  }\n   * });\n   * ```\n   *\n   * @param cb Callback to be called when a new row is inserted\n   */\n  onInsert = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.on('insert', cb);\n  };\n\n  /**\n   * Register a callback for when a row is deleted from the database.\n   *\n   * ```ts\n   * User.onDelete((user, reducerEvent) => {\n   *   if (reducerEvent) {\n   *      console.log(\"Deleted user on reducer\", reducerEvent, user);\n   *   } else {\n   *      console.log(\"Deleted user received during subscription update on update\", user);\n   *  }\n   * });\n   * ```\n   *\n   * @param cb Callback to be called when a new row is inserted\n   */\n  onDelete = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.on('delete', cb);\n  };\n\n  /**\n   * Register a callback for when a row is updated into the database.\n   *\n   * ```ts\n   * User.onInsert((user, reducerEvent) => {\n   *   if (reducerEvent) {\n   *      console.log(\"Updated user on reducer\", reducerEvent, user);\n   *   } else {\n   *      console.log(\"Updated user received during subscription update on delete\", user);\n   *  }\n   * });\n   * ```\n   *\n   * @param cb Callback to be called when a new row is inserted\n   */\n  onUpdate = <EventContext>(\n    // cb: (ctx: EventContext, oldRow: RowType, row: RowType) => void\n    cb: (ctx: EventContext, oldRow: undefined, row: RowType) => void\n  ): void => {\n    this.emitter.on('update', cb);\n  };\n\n  /**\n   * Remove a callback for when a row is newly inserted into the database.\n   *\n   * @param cb Callback to be removed\n   */\n  removeOnInsert = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.off('insert', cb);\n  };\n\n  /**\n   * Remove a callback for when a row is deleted from the database.\n   *\n   * @param cb Callback to be removed\n   */\n  removeOnDelete = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.off('delete', cb);\n  };\n\n  /**\n   * Remove a callback for when a row is updated into the database.\n   *\n   * @param cb Callback to be removed\n   */\n  removeOnUpdate = <EventContext>(\n    // cb: (ctx: EventContext, oldRow: RowType, row: RowType) => void\n    cb: (ctx: EventContext, oldRow: undefined, row: RowType) => void\n  ): void => {\n    this.emitter.off('update', cb);\n  };\n}\n","import type { TableRuntimeTypeInfo } from './spacetime_module.ts';\nimport { TableCache } from './table_cache.ts';\n\nexport class ClientCache {\n  /**\n   * The tables in the database.\n   */\n  tables: Map<string, TableCache>;\n\n  constructor() {\n    this.tables = new Map();\n  }\n\n  /**\n   * Returns the table with the given name.\n   * @param name The name of the table.\n   * @returns The table\n   */\n  getTable(name: string): TableCache {\n    const table = this.tables.get(name);\n\n    // ! This should not happen as the table should be available but an exception is thrown just in case.\n    if (!table) {\n      console.error(\n        'The table has not been registered for this client. Please register the table before using it. If you have registered global tables using the SpacetimeDBClient.registerTables() or `registerTable()` method, please make sure that is executed first!'\n      );\n      throw new Error(`Table ${name} does not exist`);\n    }\n\n    return table;\n  }\n\n  getOrCreateTable<RowType>(\n    tableTypeInfo: TableRuntimeTypeInfo\n  ): TableCache<RowType> {\n    let table: TableCache;\n    if (!this.tables.has(tableTypeInfo.tableName)) {\n      table = new TableCache<RowType>(tableTypeInfo);\n      this.tables.set(tableTypeInfo.tableName, table);\n    } else {\n      table = this.tables.get(tableTypeInfo.tableName)!;\n    }\n    return table;\n  }\n}\n","export type PrereleaseId = string | number;\n\nexport type PreRelease = PrereleaseId[];\n\n// Compare pre-release identifiers according to the semver spec (https://semver.org/#spec-item-11).\nfunction comparePreReleases(a: PreRelease, b: PreRelease): number {\n  const len = Math.min(a.length, b.length);\n  for (let i = 0; i < len; i++) {\n    const aPart = a[i];\n    const bPart = b[i];\n    if (aPart === bPart) continue;\n    if (typeof aPart === 'number' && typeof bPart === 'number') {\n      return aPart - bPart;\n    }\n    if (typeof aPart === 'string' && typeof bPart === 'string') {\n      return aPart.localeCompare(bPart);\n    }\n    // According to item 11.4.3, numeric identifiers always have lower precedence than non-numeric identifiers.\n    // So if `a` is a string, it has higher precedence than `b`.\n    return typeof aPart === 'string' ? 1 : -1;\n  }\n  // See rule 11.4.4 in the semver spec.\n  return a.length - b.length;\n}\n\n// We don't use these, and they don't matter for version ordering, so I'm not going to parse it to spec.\nexport type BuildInfo = string;\n\n// This is exported for tests.\nexport class SemanticVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  preRelease: PreRelease | null;\n  buildInfo: BuildInfo | null;\n\n  constructor(\n    major: number,\n    minor: number,\n    patch: number,\n    preRelease: PreRelease | null = null,\n    buildInfo: BuildInfo | null = null\n  ) {\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n    this.preRelease = preRelease;\n    this.buildInfo = buildInfo;\n  }\n\n  toString(): string {\n    let versionString = `${this.major}.${this.minor}.${this.patch}`;\n    if (this.preRelease) {\n      versionString += `-${this.preRelease.join('.')}`;\n    }\n    if (this.buildInfo) {\n      versionString += `+${this.buildInfo}`;\n    }\n    return versionString;\n  }\n\n  compare(other: SemanticVersion): number {\n    if (this.major !== other.major) {\n      return this.major - other.major;\n    }\n    if (this.minor !== other.minor) {\n      return this.minor - other.minor;\n    }\n    if (this.patch !== other.patch) {\n      return this.patch - other.patch;\n    }\n    if (this.preRelease && other.preRelease) {\n      return comparePreReleases(this.preRelease, other.preRelease);\n    }\n    if (this.preRelease) {\n      return -1; // The version without a pre-release is greater.\n    }\n    if (other.preRelease) {\n      return -1; // Since we don't have a pre-release, this version is greater.\n    }\n    return 0; // versions are equal\n  }\n\n  clone(): SemanticVersion {\n    return new SemanticVersion(\n      this.major,\n      this.minor,\n      this.patch,\n      this.preRelease ? [...this.preRelease] : null,\n      this.buildInfo\n    );\n  }\n\n  static parseVersionString(version: string): SemanticVersion {\n    const regex =\n      /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-([\\da-zA-Z-]+(?:\\.[\\da-zA-Z-]+)*))?(?:\\+([\\da-zA-Z-]+(?:\\.[\\da-zA-Z-]+)*))?$/;\n    const match = version.match(regex);\n    if (!match) {\n      throw new Error(`Invalid version string: ${version}`);\n    }\n\n    const major = parseInt(match[1], 10);\n    const minor = parseInt(match[2], 10);\n    const patch = parseInt(match[3], 10);\n    const preRelease = match[4]\n      ? match[4].split('.').map(id => (isNaN(Number(id)) ? id : Number(id)))\n      : null;\n    const buildInfo = match[5] || null;\n\n    return new SemanticVersion(major, minor, patch, preRelease, buildInfo);\n  }\n}\n\n// The SDK depends on some module information that was not generated before this version.\nexport const _MINIMUM_CLI_VERSION: SemanticVersion = new SemanticVersion(\n  1,\n  2,\n  0\n);\n\nexport function ensureMinimumVersionOrThrow(versionString?: string): void {\n  if (versionString === undefined) {\n    throw new Error(versionErrorMessage(versionString));\n  }\n  const version = SemanticVersion.parseVersionString(versionString);\n  if (version.compare(_MINIMUM_CLI_VERSION) < 0) {\n    throw new Error(versionErrorMessage(versionString));\n  }\n}\n\nfunction versionErrorMessage(incompatibleVersion?: string): string {\n  const badVersion =\n    incompatibleVersion === undefined ? 'unknown' : incompatibleVersion;\n  return `Module code was generated with an incompatible version of the spacetimedb cli (${incompatibleVersion}).  Update the cli version to at least ${_MINIMUM_CLI_VERSION.toString()} and regenerate the bindings. You can upgrade to the latest cli version by running: spacetime version upgrade`;\n}\n","export async function decompress(\n  buffer: Uint8Array,\n  // Leaving it here to expand to brotli when it lands in the browsers and NodeJS\n  type: 'gzip',\n  chunkSize: number = 128 * 1024 // 128KB\n): Promise<Uint8Array> {\n  // Create a single ReadableStream to handle chunks\n  let offset = 0;\n  const readableStream = new ReadableStream({\n    pull(controller) {\n      if (offset < buffer.length) {\n        // Slice a chunk of the buffer and enqueue it\n        const chunk = buffer.subarray(\n          offset,\n          Math.min(offset + chunkSize, buffer.length)\n        );\n        controller.enqueue(chunk);\n        offset += chunkSize;\n      } else {\n        controller.close();\n      }\n    },\n  });\n\n  // Create a single DecompressionStream\n  const decompressionStream = new DecompressionStream(type);\n\n  // Pipe the ReadableStream through the DecompressionStream\n  const decompressedStream = readableStream.pipeThrough(decompressionStream);\n\n  // Collect the decompressed chunks efficiently\n  const reader = decompressedStream.getReader();\n  const chunks: Uint8Array[] = [];\n  let totalLength = 0;\n  let result: any;\n\n  while (!(result = await reader.read()).done) {\n    chunks.push(result.value);\n    totalLength += result.value.length;\n  }\n\n  // Allocate a single Uint8Array for the decompressed data\n  const decompressedArray = new Uint8Array(totalLength);\n  let chunkOffset = 0;\n\n  for (const chunk of chunks) {\n    decompressedArray.set(chunk, chunkOffset);\n    chunkOffset += chunk.length;\n  }\n\n  return decompressedArray;\n}\n","import { decompress } from './decompress';\n\nexport class WebsocketDecompressAdapter {\n  onclose?: (...ev: any[]) => void;\n  onopen?: (...ev: any[]) => void;\n  onmessage?: (msg: { data: Uint8Array }) => void;\n  onerror?: (msg: ErrorEvent) => void;\n\n  #ws: WebSocket;\n\n  async #handleOnMessage(msg: MessageEvent) {\n    const buffer = new Uint8Array(msg.data);\n    let decompressed: Uint8Array;\n\n    if (buffer[0] === 0) {\n      decompressed = buffer.slice(1);\n    } else if (buffer[0] === 1) {\n      throw new Error(\n        'Brotli Compression not supported. Please use gzip or none compression in withCompression method on DbConnection.'\n      );\n    } else if (buffer[0] === 2) {\n      decompressed = await decompress(buffer.slice(1), 'gzip');\n    } else {\n      throw new Error(\n        'Unexpected Compression Algorithm. Please use `gzip` or `none`'\n      );\n    }\n\n    this.onmessage?.({ data: decompressed });\n  }\n\n  #handleOnOpen(msg: any) {\n    this.onopen?.(msg);\n  }\n\n  #handleOnError(msg: any) {\n    this.onerror?.(msg);\n  }\n\n  #handleOnClose(msg: any) {\n    this.onclose?.(msg);\n  }\n\n  send(msg: any): void {\n    this.#ws.send(msg);\n  }\n\n  close(): void {\n    this.#ws.close();\n  }\n\n  constructor(ws: WebSocket) {\n    this.onmessage = undefined;\n    this.onopen = undefined;\n    this.onmessage = undefined;\n    this.onerror = undefined;\n\n    ws.onmessage = this.#handleOnMessage.bind(this);\n    ws.onerror = this.#handleOnError.bind(this);\n    ws.onclose = this.#handleOnClose.bind(this);\n    ws.onopen = this.#handleOnOpen.bind(this);\n\n    ws.binaryType = 'arraybuffer';\n\n    this.#ws = ws;\n  }\n\n  static async createWebSocketFn({\n    url,\n    nameOrAddress,\n    wsProtocol,\n    authToken,\n    compression,\n    lightMode,\n  }: {\n    url: URL;\n    wsProtocol: string;\n    nameOrAddress: string;\n    authToken?: string;\n    compression: 'gzip' | 'none';\n    lightMode: boolean;\n  }): Promise<WebsocketDecompressAdapter> {\n    const headers = new Headers();\n\n    let WS: typeof WebSocket;\n\n    // @ts-ignore\n    // if (import.meta.env.BROWSER === 'false') {\n      WS =\n        'WebSocket' in globalThis\n          ? WebSocket\n          : ((await import('undici')).WebSocket as unknown as typeof WebSocket);\n    // } else {\n    //   WS = WebSocket;\n    // }\n\n    // We swap our original token to a shorter-lived token\n    // to avoid sending the original via query params.\n    let temporaryAuthToken: string | undefined = undefined;\n    if (authToken) {\n      headers.set('Authorization', `Bearer ${authToken}`);\n      const tokenUrl = new URL('v1/identity/websocket-token', url);\n      tokenUrl.protocol = url.protocol === 'wss:' ? 'https:' : 'http:';\n\n      const response = await fetch(tokenUrl, { method: 'POST', headers });\n      if (response.ok) {\n        const { token } = await response.json();\n        temporaryAuthToken = token;\n      } else {\n        return Promise.reject(\n          new Error(`Failed to verify token: ${response.statusText}`)\n        );\n      }\n    }\n\n    const databaseUrl = new URL(`v1/database/${nameOrAddress}/subscribe`, url);\n    if (temporaryAuthToken) {\n      databaseUrl.searchParams.set('token', temporaryAuthToken);\n    }\n    databaseUrl.searchParams.set(\n      'compression',\n      compression === 'gzip' ? 'Gzip' : 'None'\n    );\n    if (lightMode) {\n      databaseUrl.searchParams.set('light', 'true');\n    }\n\n    const ws = new WS(databaseUrl.toString(), wsProtocol);\n\n    return new WebsocketDecompressAdapter(ws);\n  }\n}\n","import { DbConnectionImpl, type ConnectionEvent } from './db_connection_impl';\nimport { EventEmitter } from './event_emitter';\nimport type { Identity } from './identity';\nimport type RemoteModule from './spacetime_module';\nimport { ensureMinimumVersionOrThrow } from './version';\nimport { WebsocketDecompressAdapter } from './websocket_decompress_adapter';\n\n/**\n * The database client connection to a SpacetimeDB server.\n */\nexport class DbConnectionBuilder<\n  DbConnection,\n  ErrorContext,\n  SubscriptionEventContext,\n> {\n  #uri?: URL;\n  #nameOrAddress?: string;\n  #identity?: Identity;\n  #token?: string;\n  #emitter: EventEmitter<ConnectionEvent> = new EventEmitter();\n  #compression: 'gzip' | 'none' = 'gzip';\n  #lightMode: boolean = false;\n  #createWSFn: typeof WebsocketDecompressAdapter.createWebSocketFn;\n\n  /**\n   * Creates a new `DbConnectionBuilder` database client and set the initial parameters.\n   *\n   * Users are not expected to call this constructor directly. Instead, use the static method `DbConnection.builder()`.\n   *\n   * @param remoteModule The remote module to use to connect to the SpacetimeDB server.\n   * @param dbConnectionConstructor The constructor to use to create a new `DbConnection`.\n   */\n  constructor(\n    private remoteModule: RemoteModule,\n    private dbConnectionConstructor: (imp: DbConnectionImpl) => DbConnection\n  ) {\n    this.#createWSFn = WebsocketDecompressAdapter.createWebSocketFn;\n  }\n\n  /**\n   * Set the URI of the SpacetimeDB server to connect to.\n   *\n   * @param uri The URI of the SpacetimeDB server to connect to.\n   *\n   **/\n  withUri(uri: string | URL): this {\n    this.#uri = new URL(uri);\n    return this;\n  }\n\n  /**\n   * Set the name or Identity of the database module to connect to.\n   *\n   * @param nameOrAddress\n   *\n   * @returns The `DbConnectionBuilder` instance.\n   */\n  withModuleName(nameOrAddress: string): this {\n    this.#nameOrAddress = nameOrAddress;\n    return this;\n  }\n\n  /**\n   * Set the identity of the client to connect to the database.\n   *\n   * @param token The credentials to use to authenticate with SpacetimeDB. This\n   * is optional. You can store the token returned by the `onConnect` callback\n   * to use in future connections.\n   *\n   * @returns The `DbConnectionBuilder` instance.\n   */\n  withToken(token?: string): this {\n    this.#token = token;\n    return this;\n  }\n\n  withWSFn(\n    createWSFn: (args: {\n      url: URL;\n      wsProtocol: string;\n      authToken?: string;\n    }) => Promise<WebsocketDecompressAdapter>\n  ): this {\n    this.#createWSFn = createWSFn;\n    return this;\n  }\n\n  /**\n   * Set the compression algorithm to use for the connection.\n   *\n   * @param compression The compression algorithm to use for the connection.\n   */\n  withCompression(compression: 'gzip' | 'none'): this {\n    this.#compression = compression;\n    return this;\n  }\n\n  /**\n   * Sets the connection to operate in light mode.\n   *\n   * Light mode is a mode that reduces the amount of data sent over the network.\n   *\n   * @param lightMode The light mode for the connection.\n   */\n  withLightMode(lightMode: boolean): this {\n    this.#lightMode = lightMode;\n    return this;\n  }\n\n  /**\n   * Register a callback to be invoked upon authentication with the database.\n   *\n   * @param identity A unique identifier for a client connected to a database.\n   * @param token The credentials to use to authenticate with SpacetimeDB.\n   *\n   * @returns The `DbConnectionBuilder` instance.\n   *\n   * The callback will be invoked with the `Identity` and private authentication `token` provided by the database to identify this connection.\n   *\n   * If credentials were supplied to connect, those passed to the callback will be equivalent to the ones used to connect.\n   *\n   * If the initial connection was anonymous, a new set of credentials will be generated by the database to identify this user.\n   *\n   * The credentials passed to the callback can be saved and used to authenticate the same user in future connections.\n   *\n   * @example\n   *\n   * ```ts\n   * DbConnection.builder().onConnect((ctx, identity, token) => {\n   *  console.log(\"Connected to SpacetimeDB with identity:\", identity.toHexString());\n   * });\n   * ```\n   */\n  onConnect(\n    callback: (\n      connection: DbConnection,\n      identity: Identity,\n      token: string\n    ) => void\n  ): this {\n    this.#emitter.on('connect', callback);\n    return this;\n  }\n\n  /**\n   * Register a callback to be invoked upon an error.\n   *\n   * @example\n   *\n   * ```ts\n   * DbConnection.builder().onConnectError((ctx, error) => {\n   *   console.log(\"Error connecting to SpacetimeDB:\", error);\n   * });\n   * ```\n   */\n  onConnectError(callback: (ctx: ErrorContext, error: Error) => void): this {\n    this.#emitter.on('connectError', callback);\n    return this;\n  }\n\n  /**\n   * Registers a callback to run when a {@link DbConnection} whose connection initially succeeded\n   * is disconnected, either after a {@link DbConnection.disconnect} call or due to an error.\n   *\n   * If the connection ended because of an error, the error is passed to the callback.\n   *\n   * The `callback` will be installed on the `DbConnection` created by `build`\n   * before initiating the connection, ensuring there's no opportunity for the disconnect to happen\n   * before the callback is installed.\n   *\n   * Note that this does not trigger if `build` fails\n   * or in cases where {@link DbConnectionBuilder.onConnectError} would trigger.\n   * This callback only triggers if the connection closes after `build` returns successfully\n   * and {@link DbConnectionBuilder.onConnect} is invoked, i.e., after the `IdentityToken` is received.\n   *\n   * To simplify SDK implementation, at most one such callback can be registered.\n   * Calling `onDisconnect` on the same `DbConnectionBuilder` multiple times throws an error.\n   *\n   * Unlike callbacks registered via {@link DbConnection},\n   * no mechanism is provided to unregister the provided callback.\n   * This is a concession to ergonomics; there's no clean place to return a `CallbackId` from this method\n   * or from `build`.\n   *\n   * @param {function(error?: Error): void} callback - The callback to invoke upon disconnection.\n   * @throws {Error} Throws an error if called multiple times on the same `DbConnectionBuilder`.\n   */\n  onDisconnect(\n    callback: (ctx: ErrorContext, error?: Error | undefined) => void\n  ): this {\n    this.#emitter.on('disconnect', callback);\n    return this;\n  }\n\n  /**\n   * Builds a new `DbConnection` with the parameters set on this `DbConnectionBuilder` and attempts to connect to the SpacetimeDB server.\n   *\n   * @returns A new `DbConnection` with the parameters set on this `DbConnectionBuilder`.\n   *\n   * @example\n   *\n   * ```ts\n   * const host = \"http://localhost:3000\";\n   * const name_or_address = \"database_name\"\n   * const auth_token = undefined;\n   * DbConnection.builder().withUri(host).withModuleName(name_or_address).withToken(auth_token).build();\n   * ```\n   */\n  build(): DbConnection {\n    if (!this.#uri) {\n      throw new Error('URI is required to connect to SpacetimeDB');\n    }\n\n    if (!this.#nameOrAddress) {\n      throw new Error(\n        'Database name or address is required to connect to SpacetimeDB'\n      );\n    }\n    // We could consider making this an `onConnectError` instead of throwing here.\n    // Ideally, it would be a compile time error, but I'm not sure how to accomplish that.\n    ensureMinimumVersionOrThrow(this.remoteModule.versionInfo?.cliVersion);\n\n    return this.dbConnectionConstructor(\n      new DbConnectionImpl({\n        uri: this.#uri,\n        nameOrAddress: this.#nameOrAddress,\n        identity: this.#identity,\n        token: this.#token,\n        emitter: this.#emitter,\n        compression: this.#compression,\n        lightMode: this.#lightMode,\n        createWSFn: this.#createWSFn,\n        remoteModule: this.remoteModule,\n      })\n    );\n  }\n}\n","import type { DbConnectionImpl } from './db_connection_impl';\nimport type {\n  ErrorContextInterface,\n  SubscriptionEventContextInterface,\n} from './event_context';\nimport { EventEmitter } from './event_emitter';\n\nexport class SubscriptionBuilderImpl<\n  DBView = any,\n  Reducers = any,\n  SetReducerFlags = any,\n> {\n  #onApplied?: (\n    ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n  ) => void = undefined;\n  #onError?: (\n    ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>\n  ) => void = undefined;\n  constructor(\n    private db: DbConnectionImpl<DBView, Reducers, SetReducerFlags>\n  ) {}\n\n  /**\n   * Registers `callback` to run when this query is successfully added to our subscribed set,\n   * I.e. when its `SubscriptionApplied` message is received.\n   *\n   * The database state exposed via the `&EventContext` argument\n   * includes all the rows added to the client cache as a result of the new subscription.\n   *\n   * The event in the `&EventContext` argument is `Event::SubscribeApplied`.\n   *\n   * Multiple `on_applied` callbacks for the same query may coexist.\n   * No mechanism for un-registering `on_applied` callbacks is exposed.\n   *\n   * @param cb - Callback to run when the subscription is applied.\n   * @returns The current `SubscriptionBuilder` instance.\n   */\n  onApplied(\n    cb: (\n      ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n    ) => void\n  ): SubscriptionBuilderImpl<DBView, Reducers, SetReducerFlags> {\n    this.#onApplied = cb;\n    return this;\n  }\n\n  /**\n   * Registers `callback` to run when this query either:\n   * - Fails to be added to our subscribed set.\n   * - Is unexpectedly removed from our subscribed set.\n   *\n   * If the subscription had previously started and has been unexpectedly removed,\n   * the database state exposed via the `&EventContext` argument contains no rows\n   * from any subscriptions removed within the same error event.\n   * As proposed, it must therefore contain no rows.\n   *\n   * The event in the `&EventContext` argument is `Event::SubscribeError`,\n   * containing a dynamic error object with a human-readable description of the error\n   * for diagnostic purposes.\n   *\n   * Multiple `on_error` callbacks for the same query may coexist.\n   * No mechanism for un-registering `on_error` callbacks is exposed.\n   *\n   * @param cb - Callback to run when there is an error in subscription.\n   * @returns The current `SubscriptionBuilder` instance.\n   */\n  onError(\n    cb: (ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>) => void\n  ): SubscriptionBuilderImpl<DBView, Reducers, SetReducerFlags> {\n    this.#onError = cb;\n    return this;\n  }\n\n  /**\n   * Subscribe to a single query. The results of the query will be merged into the client\n   * cache and deduplicated on the client.\n   *\n   * @param query_sql A `SQL` query to subscribe to.\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = connection.subscriptionBuilder().onApplied(() => {\n   *   console.log(\"SDK client cache initialized.\");\n   * }).subscribe(\"SELECT * FROM User\");\n   *\n   * subscription.unsubscribe();\n   * ```\n   */\n  subscribe(\n    query_sql: string | string[]\n  ): SubscriptionHandleImpl<DBView, Reducers, SetReducerFlags> {\n    const queries = Array.isArray(query_sql) ? query_sql : [query_sql];\n    if (queries.length === 0) {\n      throw new Error('Subscriptions must have at least one query');\n    }\n    return new SubscriptionHandleImpl(\n      this.db,\n      queries,\n      this.#onApplied,\n      this.#onError\n    );\n  }\n\n  /**\n   * Subscribes to all rows from all tables.\n   *\n   * This method is intended as a convenience\n   * for applications where client-side memory use and network bandwidth are not concerns.\n   * Applications where these resources are a constraint\n   * should register more precise queries via `subscribe`\n   * in order to replicate only the subset of data which the client needs to function.\n   *\n   * This method should not be combined with `subscribe` on the same `DbConnection`.\n   * A connection may either `subscribe` to particular queries,\n   * or `subscribeToAllTables`, but not both.\n   * Attempting to call `subscribe`\n   * on a `DbConnection` that has previously used `subscribeToAllTables`,\n   * or vice versa, may misbehave in any number of ways,\n   * including dropping subscriptions, corrupting the client cache, or throwing errors.\n   */\n  subscribeToAllTables(): void {\n    this.subscribe('SELECT * FROM *');\n  }\n}\n\nexport type SubscribeEvent = 'applied' | 'error' | 'end';\n\nexport class SubscriptionManager {\n  subscriptions: Map<\n    number,\n    { handle: SubscriptionHandleImpl; emitter: EventEmitter<SubscribeEvent> }\n  > = new Map();\n}\n\nexport class SubscriptionHandleImpl<\n  DBView = any,\n  Reducers = any,\n  SetReducerFlags = any,\n> {\n  #queryId: number;\n  #unsubscribeCalled: boolean = false;\n  #endedState: boolean = false;\n  #activeState: boolean = false;\n  #emitter: EventEmitter<SubscribeEvent, (...args: any[]) => void> =\n    new EventEmitter();\n\n  constructor(\n    private db: DbConnectionImpl<DBView, Reducers, SetReducerFlags>,\n    querySql: string[],\n    onApplied?: (\n      ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n    ) => void,\n    onError?: (\n      ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>,\n      error: Error\n    ) => void\n  ) {\n    this.#emitter.on(\n      'applied',\n      (\n        ctx: SubscriptionEventContextInterface<\n          DBView,\n          Reducers,\n          SetReducerFlags\n        >\n      ) => {\n        this.#activeState = true;\n        if (onApplied) {\n          onApplied(ctx);\n        }\n      }\n    );\n    this.#emitter.on(\n      'error',\n      (\n        ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>,\n        error: Error\n      ) => {\n        this.#activeState = false;\n        this.#endedState = true;\n        if (onError) {\n          onError(ctx, error);\n        }\n      }\n    );\n    this.#queryId = this.db.registerSubscription(this, this.#emitter, querySql);\n  }\n\n  /**\n   * Consumes self and issues an `Unsubscribe` message,\n   * removing this query from the client's set of subscribed queries.\n   * It is only valid to call this method if `is_active()` is `true`.\n   */\n  unsubscribe(): void {\n    if (this.#unsubscribeCalled) {\n      throw new Error('Unsubscribe has already been called');\n    }\n    this.#unsubscribeCalled = true;\n    this.db.unregisterSubscription(this.#queryId);\n    this.#emitter.on(\n      'end',\n      (\n        _ctx: SubscriptionEventContextInterface<\n          DBView,\n          Reducers,\n          SetReducerFlags\n        >\n      ) => {\n        this.#endedState = true;\n        this.#activeState = false;\n      }\n    );\n  }\n\n  /**\n   * Unsubscribes and also registers a callback to run upon success.\n   * I.e. when an `UnsubscribeApplied` message is received.\n   *\n   * If `Unsubscribe` returns an error,\n   * or if the `on_error` callback(s) are invoked before this subscription would end normally,\n   * the `on_end` callback is not invoked.\n   *\n   * @param onEnd - Callback to run upon successful unsubscribe.\n   */\n  unsubscribeThen(\n    onEnd: (\n      ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n    ) => void\n  ): void {\n    if (this.#endedState) {\n      throw new Error('Subscription has already ended');\n    }\n    if (this.#unsubscribeCalled) {\n      throw new Error('Unsubscribe has already been called');\n    }\n    this.#unsubscribeCalled = true;\n    this.db.unregisterSubscription(this.#queryId);\n    this.#emitter.on(\n      'end',\n      (\n        ctx: SubscriptionEventContextInterface<\n          DBView,\n          Reducers,\n          SetReducerFlags\n        >\n      ) => {\n        this.#endedState = true;\n        this.#activeState = false;\n        onEnd(ctx);\n      }\n    );\n  }\n\n  /**\n   * True if this `SubscriptionHandle` has ended,\n   * either due to an error or a call to `unsubscribe`.\n   *\n   * This is initially false, and becomes true when either the `on_end` or `on_error` callback is invoked.\n   * A subscription which has not yet been applied is not active, but is also not ended.\n   */\n  isEnded(): boolean {\n    return this.#endedState;\n  }\n\n  /**\n   * True if this `SubscriptionHandle` is active, meaning it has been successfully applied\n   * and has not since ended, either due to an error or a complete `unsubscribe` request-response pair.\n   *\n   * This corresponds exactly to the interval bounded at the start by the `on_applied` callback\n   * and at the end by either the `on_end` or `on_error` callback.\n   */\n  isActive(): boolean {\n    return this.#activeState;\n  }\n}\n","import { ConnectionId } from './connection_id';\nimport {\n  AlgebraicType,\n  ProductType,\n  ProductTypeElement,\n  SumType,\n  SumTypeVariant,\n  type ComparablePrimitive,\n} from './algebraic_type.ts';\nimport {\n  AlgebraicValue,\n  parseValue,\n  ProductValue,\n  type ReducerArgsAdapter,\n  type ValueAdapter,\n} from './algebraic_value.ts';\nimport BinaryReader from './binary_reader.ts';\nimport BinaryWriter from './binary_writer.ts';\nimport { BsatnRowList } from './client_api/bsatn_row_list_type.ts';\nimport { ClientMessage } from './client_api/client_message_type.ts';\nimport { DatabaseUpdate } from './client_api/database_update_type.ts';\nimport { QueryUpdate } from './client_api/query_update_type.ts';\nimport { ServerMessage } from './client_api/server_message_type.ts';\nimport { TableUpdate as RawTableUpdate } from './client_api/table_update_type.ts';\nimport type * as clientApi from './client_api/index.ts';\nimport { ClientCache } from './client_cache.ts';\nimport { DbConnectionBuilder } from './db_connection_builder.ts';\nimport { type DbContext } from './db_context.ts';\nimport type { Event } from './event.ts';\nimport {\n  type ErrorContextInterface,\n  type EventContextInterface,\n  type ReducerEventContextInterface,\n  type SubscriptionEventContextInterface,\n} from './event_context.ts';\nimport { EventEmitter } from './event_emitter.ts';\nimport { decompress } from './decompress.ts';\nimport type { Identity } from './identity.ts';\nimport type {\n  IdentityTokenMessage,\n  Message,\n  SubscribeAppliedMessage,\n  UnsubscribeAppliedMessage,\n} from './message_types.ts';\nimport type { ReducerEvent } from './reducer_event.ts';\nimport type RemoteModule from './spacetime_module.ts';\nimport {\n  TableCache,\n  type Operation,\n  type PendingCallback,\n  type TableUpdate as CacheTableUpdate,\n} from './table_cache.ts';\nimport { deepEqual, toPascalCase } from './utils.ts';\nimport { WebsocketDecompressAdapter } from './websocket_decompress_adapter.ts';\nimport type { WebsocketTestAdapter } from './websocket_test_adapter.ts';\nimport {\n  SubscriptionBuilderImpl,\n  SubscriptionHandleImpl,\n  SubscriptionManager,\n  type SubscribeEvent,\n} from './subscription_builder_impl.ts';\nimport { stdbLogger } from './logger.ts';\nimport { type ReducerRuntimeTypeInfo } from './spacetime_module.ts';\nimport { fromByteArray } from 'base64-js';\n\nexport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  DbConnectionBuilder,\n  deepEqual,\n  ProductType,\n  ProductTypeElement,\n  ProductValue,\n  SubscriptionBuilderImpl,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  type Event,\n  type ReducerArgsAdapter,\n  type ValueAdapter,\n};\n\nexport type {\n  DbContext,\n  EventContextInterface,\n  ReducerEventContextInterface,\n  SubscriptionEventContextInterface,\n  ErrorContextInterface,\n  ReducerEvent,\n};\n\nexport type ConnectionEvent = 'connect' | 'disconnect' | 'connectError';\nexport type CallReducerFlags = 'FullUpdate' | 'NoSuccessNotify';\n\ntype ReducerEventCallback<ReducerArgs extends any[] = any[]> = (\n  ctx: ReducerEventContextInterface,\n  ...args: ReducerArgs\n) => void;\ntype SubscriptionEventCallback = (\n  ctx: SubscriptionEventContextInterface\n) => void;\ntype ErrorCallback = (ctx: ErrorContextInterface) => void;\n\nfunction callReducerFlagsToNumber(flags: CallReducerFlags): number {\n  switch (flags) {\n    case 'FullUpdate':\n      return 0;\n    case 'NoSuccessNotify':\n      return 1;\n  }\n}\n\ntype DbConnectionConfig = {\n  uri: URL;\n  nameOrAddress: string;\n  identity?: Identity;\n  token?: string;\n  emitter: EventEmitter<ConnectionEvent>;\n  remoteModule: RemoteModule;\n  createWSFn: typeof WebsocketDecompressAdapter.createWebSocketFn;\n  compression: 'gzip' | 'none';\n  lightMode: boolean;\n};\n\nexport class DbConnectionImpl<\n  DBView = any,\n  Reducers = any,\n  SetReducerFlags = any,\n> implements DbContext<DBView, Reducers>\n{\n  /**\n   * Whether or not the connection is active.\n   */\n  isActive = false;\n\n  /**\n   * This connection's public identity.\n   */\n  identity?: Identity = undefined;\n\n  /**\n   * This connection's private authentication token.\n   */\n  token?: string = undefined;\n\n  /**\n   * The accessor field to access the tables in the database and associated\n   * callback functions.\n   */\n  db: DBView;\n\n  /**\n   * The accessor field to access the reducers in the database and associated\n   * callback functions.\n   */\n  reducers: Reducers;\n\n  /**\n   * The accessor field to access functions related to setting flags on\n   * reducers regarding how the server should handle the reducer call and\n   * the events that it sends back to the client.\n   */\n  setReducerFlags: SetReducerFlags;\n\n  /**\n   * The `ConnectionId` of the connection to to the database.\n   */\n  connectionId: ConnectionId = ConnectionId.random();\n\n  // These fields are meant to be strictly private.\n  #queryId = 0;\n  #emitter: EventEmitter<ConnectionEvent>;\n  #reducerEmitter: EventEmitter<string, ReducerEventCallback> =\n    new EventEmitter();\n  #onApplied?: SubscriptionEventCallback;\n  #remoteModule: RemoteModule;\n  #messageQueue = Promise.resolve();\n  #subscriptionManager = new SubscriptionManager();\n\n  // These fields are not part of the public API, but in a pinch you\n  // could use JavaScript to access them by bypassing TypeScript's\n  // private fields.\n  // We use them in testing.\n  private clientCache: ClientCache;\n  private ws?: WebsocketDecompressAdapter | WebsocketTestAdapter;\n  private wsPromise: Promise<\n    WebsocketDecompressAdapter | WebsocketTestAdapter | undefined\n  >;\n\n  constructor({\n    uri,\n    nameOrAddress,\n    identity,\n    token,\n    emitter,\n    remoteModule,\n    createWSFn,\n    compression,\n    lightMode,\n  }: DbConnectionConfig) {\n    stdbLogger('info', 'Connecting to SpacetimeDB WS...');\n\n    // We use .toString() here because some versions of React Native contain a bug where the URL constructor\n    // incorrectly treats a URL instance as a plain string.\n    // This results in an attempt to call .endsWith() on it, leading to an error.\n    let url = new URL(uri.toString());\n    if (!/^wss?:/.test(uri.protocol)) {\n      url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    }\n\n    this.identity = identity;\n    this.token = token;\n\n    this.#remoteModule = remoteModule;\n    this.#emitter = emitter;\n\n    let connectionId = this.connectionId.toHexString();\n    url.searchParams.set('connection_id', connectionId);\n\n    this.clientCache = new ClientCache();\n    this.db = this.#remoteModule.dbViewConstructor(this);\n    this.setReducerFlags = this.#remoteModule.setReducerFlagsConstructor();\n    this.reducers = this.#remoteModule.reducersConstructor(\n      this,\n      this.setReducerFlags\n    );\n\n    this.wsPromise = createWSFn({\n      url,\n      nameOrAddress,\n      wsProtocol: 'v1.bsatn.spacetimedb',\n      authToken: token,\n      compression: compression,\n      lightMode: lightMode,\n    })\n      .then(v => {\n        this.ws = v;\n\n        this.ws.onclose = () => {\n          this.#emitter.emit('disconnect', this);\n        };\n        this.ws.onerror = (e: ErrorEvent) => {\n          this.#emitter.emit('connectError', this, e);\n        };\n        this.ws.onopen = this.#handleOnOpen.bind(this);\n        this.ws.onmessage = this.#handleOnMessage.bind(this);\n        return v;\n      })\n      .catch(e => {\n        stdbLogger('error', 'Error connecting to SpacetimeDB WS');\n        this.#emitter.emit('connectError', this, e);\n\n        return undefined;\n      });\n  }\n\n  #getNextQueryId = () => {\n    const queryId = this.#queryId;\n    this.#queryId += 1;\n    return queryId;\n  };\n\n  // NOTE: This is very important!!! This is the actual function that\n  // gets called when you call `connection.subscriptionBuilder()`.\n  // The `subscriptionBuilder` function which is generated, just shadows\n  // this function in the type system, but not the actual implementation!\n  // Do not remove this function, or shoot yourself in the foot please.\n  // It's not clear what would be a better way to do this at this exact\n  // moment.\n  subscriptionBuilder = (): SubscriptionBuilderImpl => {\n    return new SubscriptionBuilderImpl(this);\n  };\n\n  registerSubscription(\n    handle: SubscriptionHandleImpl<DBView, Reducers, SetReducerFlags>,\n    handleEmitter: EventEmitter<SubscribeEvent, SubscriptionEventCallback>,\n    querySql: string[]\n  ): number {\n    const queryId = this.#getNextQueryId();\n    this.#subscriptionManager.subscriptions.set(queryId, {\n      handle,\n      emitter: handleEmitter,\n    });\n    this.#sendMessage(\n      ClientMessage.SubscribeMulti({\n        queryStrings: querySql,\n        queryId: { id: queryId },\n        // The TypeScript SDK doesn't currently track `request_id`s,\n        // so always use 0.\n        requestId: 0,\n      })\n    );\n    return queryId;\n  }\n\n  unregisterSubscription(queryId: number): void {\n    this.#sendMessage(\n      ClientMessage.UnsubscribeMulti({\n        queryId: { id: queryId },\n        // The TypeScript SDK doesn't currently track `request_id`s,\n        // so always use 0.\n        requestId: 0,\n      })\n    );\n  }\n\n  // This function is async because we decompress the message async\n  async #processParsedMessage(\n    message: ServerMessage\n  ): Promise<Message | undefined> {\n    const parseRowList = (\n      type: 'insert' | 'delete',\n      tableName: string,\n      rowList: BsatnRowList\n    ): Operation[] => {\n      const buffer = rowList.rowsData;\n      const reader = new BinaryReader(buffer);\n      const rows: Operation[] = [];\n      const rowType = this.#remoteModule.tables[tableName]!.rowType;\n      const primaryKeyInfo =\n        this.#remoteModule.tables[tableName]!.primaryKeyInfo;\n      while (reader.offset < buffer.length + buffer.byteOffset) {\n        const initialOffset = reader.offset;\n        const row = rowType.deserialize(reader);\n        let rowId: ComparablePrimitive | undefined = undefined;\n        if (primaryKeyInfo !== undefined) {\n          rowId = primaryKeyInfo.colType.intoMapKey(\n            row[primaryKeyInfo.colName]\n          );\n        } else {\n          // Get a view of the bytes for this row.\n          const rowBytes = buffer.subarray(\n            initialOffset - buffer.byteOffset,\n            reader.offset - buffer.byteOffset\n          );\n          // Convert it to a base64 string, so we can use it as a map key.\n          const asBase64 = fromByteArray(rowBytes);\n          rowId = asBase64;\n        }\n\n        rows.push({\n          type,\n          rowId,\n          row,\n        });\n      }\n      return rows;\n    };\n\n    const parseTableUpdate = async (\n      rawTableUpdate: RawTableUpdate\n    ): Promise<CacheTableUpdate> => {\n      const tableName = rawTableUpdate.tableName;\n      let operations: Operation[] = [];\n      for (const update of rawTableUpdate.updates) {\n        let decompressed: QueryUpdate;\n        if (update.tag === 'Gzip') {\n          const decompressedBuffer = await decompress(update.value, 'gzip');\n          decompressed = QueryUpdate.deserialize(\n            new BinaryReader(decompressedBuffer)\n          );\n        } else if (update.tag === 'Brotli') {\n          throw new Error(\n            'Brotli compression not supported. Please use gzip or none compression in withCompression method on DbConnection.'\n          );\n        } else {\n          decompressed = update.value;\n        }\n        operations = operations.concat(\n          parseRowList('insert', tableName, decompressed.inserts)\n        );\n        operations = operations.concat(\n          parseRowList('delete', tableName, decompressed.deletes)\n        );\n      }\n      return {\n        tableName,\n        operations,\n      };\n    };\n\n    const parseDatabaseUpdate = async (\n      dbUpdate: DatabaseUpdate\n    ): Promise<CacheTableUpdate[]> => {\n      const tableUpdates: CacheTableUpdate[] = [];\n      for (const rawTableUpdate of dbUpdate.tables) {\n        tableUpdates.push(await parseTableUpdate(rawTableUpdate));\n      }\n      return tableUpdates;\n    };\n\n    switch (message.tag) {\n      case 'InitialSubscription': {\n        const dbUpdate = message.value.databaseUpdate;\n        const tableUpdates = await parseDatabaseUpdate(dbUpdate);\n        const subscriptionUpdate: Message = {\n          tag: 'InitialSubscription',\n          tableUpdates,\n        };\n        return subscriptionUpdate;\n      }\n\n      case 'TransactionUpdateLight': {\n        const dbUpdate = message.value.update;\n        const tableUpdates = await parseDatabaseUpdate(dbUpdate);\n        const subscriptionUpdate: Message = {\n          tag: 'TransactionUpdateLight',\n          tableUpdates,\n        };\n        return subscriptionUpdate;\n      }\n\n      case 'TransactionUpdate': {\n        const txUpdate = message.value;\n        const identity = txUpdate.callerIdentity;\n        const connectionId = ConnectionId.nullIfZero(\n          txUpdate.callerConnectionId\n        );\n        const reducerName: string = txUpdate.reducerCall.reducerName;\n        const args = txUpdate.reducerCall.args;\n        const energyQuantaUsed = txUpdate.energyQuantaUsed;\n\n        let tableUpdates: CacheTableUpdate[];\n        let errMessage = '';\n        switch (txUpdate.status.tag) {\n          case 'Committed':\n            tableUpdates = await parseDatabaseUpdate(txUpdate.status.value);\n            break;\n          case 'Failed':\n            tableUpdates = [];\n            errMessage = txUpdate.status.value;\n            break;\n          case 'OutOfEnergy':\n            tableUpdates = [];\n            break;\n        }\n\n        // TODO: Can `reducerName` be '<none>'?\n        // See: https://github.com/clockworklabs/SpacetimeDB/blob/a2a1b5d9b2e0ebaaf753d074db056d319952d442/crates/core/src/client/message_handlers.rs#L155\n        if (reducerName === '<none>') {\n          let errorMessage = errMessage;\n          console.error(`Received an error from the database: ${errorMessage}`);\n          return;\n        }\n\n        let reducerInfo:\n          | {\n              reducerName: string;\n              args: Uint8Array;\n            }\n          | undefined;\n        if (reducerName !== '') {\n          reducerInfo = {\n            reducerName,\n            args,\n          };\n        }\n\n        const transactionUpdate: Message = {\n          tag: 'TransactionUpdate',\n          tableUpdates,\n          identity,\n          connectionId,\n          reducerInfo,\n          status: txUpdate.status,\n          energyConsumed: energyQuantaUsed.quanta,\n          message: errMessage,\n          timestamp: txUpdate.timestamp,\n        };\n        return transactionUpdate;\n      }\n\n      case 'IdentityToken': {\n        const identityTokenMessage: IdentityTokenMessage = {\n          tag: 'IdentityToken',\n          identity: message.value.identity,\n          token: message.value.token,\n          connectionId: message.value.connectionId,\n        };\n        return identityTokenMessage;\n      }\n\n      case 'OneOffQueryResponse': {\n        throw new Error(\n          `TypeScript SDK never sends one-off queries, but got OneOffQueryResponse ${message}`\n        );\n      }\n\n      case 'SubscribeMultiApplied': {\n        const parsedTableUpdates = await parseDatabaseUpdate(\n          message.value.update\n        );\n        const subscribeAppliedMessage: SubscribeAppliedMessage = {\n          tag: 'SubscribeApplied',\n          queryId: message.value.queryId.id,\n          tableUpdates: parsedTableUpdates,\n        };\n        return subscribeAppliedMessage;\n      }\n\n      case 'UnsubscribeMultiApplied': {\n        const parsedTableUpdates = await parseDatabaseUpdate(\n          message.value.update\n        );\n        const unsubscribeAppliedMessage: UnsubscribeAppliedMessage = {\n          tag: 'UnsubscribeApplied',\n          queryId: message.value.queryId.id,\n          tableUpdates: parsedTableUpdates,\n        };\n        return unsubscribeAppliedMessage;\n      }\n\n      case 'SubscriptionError': {\n        return {\n          tag: 'SubscriptionError',\n          queryId: message.value.queryId,\n          error: message.value.error,\n        };\n      }\n    }\n  }\n\n  #sendMessage(message: ClientMessage): void {\n    this.wsPromise.then(wsResolved => {\n      if (wsResolved) {\n        const writer = new BinaryWriter(1024);\n        ClientMessage.serialize(writer, message);\n        const encoded = writer.getBuffer();\n        wsResolved.send(encoded);\n      }\n    });\n  }\n\n  /**\n   * Handles WebSocket onOpen event.\n   */\n  #handleOnOpen(): void {\n    this.isActive = true;\n  }\n\n  #applyTableUpdates(\n    tableUpdates: CacheTableUpdate[],\n    eventContext: EventContextInterface\n  ): PendingCallback[] {\n    let pendingCallbacks: PendingCallback[] = [];\n    for (let tableUpdate of tableUpdates) {\n      // Get table information for the table being updated\n      const tableName = tableUpdate.tableName;\n      const tableTypeInfo = this.#remoteModule.tables[tableName]!;\n      const table = this.clientCache.getOrCreateTable(tableTypeInfo);\n      const newCallbacks = table.applyOperations(\n        tableUpdate.operations,\n        eventContext\n      );\n      for (const callback of newCallbacks) {\n        pendingCallbacks.push(callback);\n      }\n    }\n    return pendingCallbacks;\n  }\n\n  async #processMessage(data: Uint8Array): Promise<void> {\n    const serverMessage = parseValue(ServerMessage, data);\n    const message = await this.#processParsedMessage(serverMessage);\n    if (!message) {\n      return;\n    }\n    switch (message.tag) {\n      case 'InitialSubscription': {\n        let event: Event<never> = { tag: 'SubscribeApplied' };\n\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        // Remove the event from the subscription event context\n        // It is not a field in the type narrowed SubscriptionEventContext\n        const { event: _, ...subscriptionEventContext } = eventContext;\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n\n        if (this.#emitter) {\n          this.#onApplied?.(subscriptionEventContext);\n        }\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'TransactionUpdateLight': {\n        let event: Event<never> = { tag: 'UnknownTransaction' };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'TransactionUpdate': {\n        let reducerInfo = message.reducerInfo;\n        let unknownTransaction = false;\n        let reducerArgs: any | undefined;\n        let reducerTypeInfo: ReducerRuntimeTypeInfo | undefined;\n        if (!reducerInfo) {\n          unknownTransaction = true;\n        } else {\n          reducerTypeInfo =\n            this.#remoteModule.reducers[reducerInfo.reducerName];\n          try {\n            const reader = new BinaryReader(reducerInfo.args as Uint8Array);\n            reducerArgs = reducerTypeInfo.argsType.deserialize(reader);\n          } catch {\n            // This should only be printed in development, since it's\n            // possible for clients to receive new reducers that they don't\n            // know about.\n            console.debug('Failed to deserialize reducer arguments');\n            unknownTransaction = true;\n          }\n        }\n\n        if (unknownTransaction) {\n          const event: Event<never> = { tag: 'UnknownTransaction' };\n          const eventContext = this.#remoteModule.eventContextConstructor(\n            this,\n            event\n          );\n          const callbacks = this.#applyTableUpdates(\n            message.tableUpdates,\n            eventContext\n          );\n\n          for (const callback of callbacks) {\n            callback.cb();\n          }\n          return;\n        }\n\n        // At this point, we know that `reducerInfo` is not null because\n        // we return if `unknownTransaction` is true.\n        reducerInfo = reducerInfo!;\n        reducerTypeInfo = reducerTypeInfo!;\n\n        // Thus this must be a reducer event create it and emit it.\n        const reducerEvent = {\n          callerIdentity: message.identity,\n          status: message.status,\n          callerConnectionId: message.connectionId as ConnectionId,\n          timestamp: message.timestamp,\n          energyConsumed: message.energyConsumed,\n          reducer: {\n            name: reducerInfo.reducerName,\n            args: reducerArgs,\n          },\n        };\n        const event: Event<typeof reducerEvent.reducer> = {\n          tag: 'Reducer',\n          value: reducerEvent,\n        };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const reducerEventContext = {\n          ...eventContext,\n          event: reducerEvent,\n        };\n\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n\n        const argsArray: any[] = [];\n        reducerTypeInfo.argsType.product.elements.forEach((element, index) => {\n          argsArray.push(reducerArgs[element.name]);\n        });\n        this.#reducerEmitter.emit(\n          reducerInfo.reducerName,\n          reducerEventContext,\n          ...argsArray\n        );\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'IdentityToken': {\n        this.identity = message.identity;\n        if (!this.token && message.token) {\n          this.token = message.token;\n        }\n        this.connectionId = message.connectionId;\n        this.#emitter.emit('connect', this, this.identity, this.token);\n        break;\n      }\n      case 'SubscribeApplied': {\n        const subscription = this.#subscriptionManager.subscriptions.get(\n          message.queryId\n        );\n        if (subscription === undefined) {\n          stdbLogger(\n            'error',\n            `Received SubscribeApplied for unknown queryId ${message.queryId}.`\n          );\n          // If we don't know about the subscription, we won't apply the table updates.\n          break;\n        }\n        const event: Event<never> = { tag: 'SubscribeApplied' };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const { event: _, ...subscriptionEventContext } = eventContext;\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n        subscription?.emitter.emit('applied', subscriptionEventContext);\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'UnsubscribeApplied': {\n        const subscription = this.#subscriptionManager.subscriptions.get(\n          message.queryId\n        );\n        if (subscription === undefined) {\n          stdbLogger(\n            'error',\n            `Received UnsubscribeApplied for unknown queryId ${message.queryId}.`\n          );\n          // If we don't know about the subscription, we won't apply the table updates.\n          break;\n        }\n        const event: Event<never> = { tag: 'UnsubscribeApplied' };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const { event: _, ...subscriptionEventContext } = eventContext;\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n        subscription?.emitter.emit('end', subscriptionEventContext);\n        this.#subscriptionManager.subscriptions.delete(message.queryId);\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'SubscriptionError': {\n        const error = Error(message.error);\n        const event: Event<never> = { tag: 'Error', value: error };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const errorContext = {\n          ...eventContext,\n          event: error,\n        };\n        if (message.queryId !== undefined) {\n          this.#subscriptionManager.subscriptions\n            .get(message.queryId)\n            ?.emitter.emit('error', errorContext, error);\n          this.#subscriptionManager.subscriptions.delete(message.queryId);\n        } else {\n          console.error('Received an error message without a queryId: ', error);\n          // TODO: This should actually kill the connection.\n          // A subscription error without a specific subscription means we aren't receiving\n          // updates for all of our subscriptions, so our cache is out of sync.\n\n          // Send it to all of them:\n          this.#subscriptionManager.subscriptions.forEach(({ emitter }) => {\n            emitter.emit('error', errorContext, error);\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles WebSocket onMessage event.\n   * @param wsMessage MessageEvent object.\n   */\n  #handleOnMessage(wsMessage: { data: Uint8Array }): void {\n    // Utilize promise chaining to ensure that we process messages in order\n    // even though we are processing them asyncronously. This will not begin\n    // processing the next message until we await the processing of the\n    // current message.\n    this.#messageQueue = this.#messageQueue.then(() => {\n      return this.#processMessage(wsMessage.data);\n    });\n  }\n\n  /**\n   * Call a reducer on your SpacetimeDB module.\n   *\n   * @param reducerName The name of the reducer to call\n   * @param argsSerializer The arguments to pass to the reducer\n   */\n  callReducer(\n    reducerName: string,\n    argsBuffer: Uint8Array,\n    flags: CallReducerFlags\n  ): void {\n    const message = ClientMessage.CallReducer({\n      reducer: reducerName,\n      args: argsBuffer,\n      // The TypeScript SDK doesn't currently track `request_id`s,\n      // so always use 0.\n      requestId: 0,\n      flags: callReducerFlagsToNumber(flags),\n    });\n    this.#sendMessage(message);\n  }\n\n  /**\n   * Close the current connection.\n   *\n   * @example\n   *\n   * ```ts\n   * const connection = DbConnection.builder().build();\n   * connection.disconnect()\n   * ```\n   */\n  disconnect(): void {\n    this.wsPromise.then(wsResolved => {\n      if (wsResolved) {\n        wsResolved.close();\n      }\n    });\n  }\n\n  #on(\n    eventName: ConnectionEvent,\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.on(eventName, callback);\n  }\n\n  #off(\n    eventName: ConnectionEvent,\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off(eventName, callback);\n  }\n\n  #onConnect(callback: (ctx: DbConnectionImpl, ...args: any[]) => void): void {\n    this.#emitter.on('connect', callback);\n  }\n\n  #onDisconnect(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.on('disconnect', callback);\n  }\n\n  #onConnectError(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.on('connectError', callback);\n  }\n\n  #removeOnConnect(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off('connect', callback);\n  }\n\n  #removeOnDisconnect(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off('disconnect', callback);\n  }\n\n  #removeOnConnectError(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off('connectError', callback);\n  }\n\n  // Note: This is required to be public because it needs to be\n  // called from the `RemoteReducers` class.\n  onReducer(reducerName: string, callback: ReducerEventCallback): void {\n    this.#reducerEmitter.on(reducerName, callback);\n  }\n\n  // Note: This is required to be public because it needs to be\n  // called from the `RemoteReducers` class.\n  offReducer(reducerName: string, callback: ReducerEventCallback): void {\n    this.#reducerEmitter.off(reducerName, callback);\n  }\n}\n"]}